{"version":3,"sources":["hooks/useIsOnScreen.tsx","styled/animations.tsx","components/designsystem/Slider.tsx","icons/PlayPauseIcon.tsx","components/player/ToggleFullscreenButton.tsx","components/player/LinkList.tsx","components/player/Overlay.tsx","components/player/ProgressBar.tsx","components/player/FullscreenProgressBar.tsx","components/designsystem/FlexVideo.tsx","components/player/media/StyledMedia.ts","components/player/media/Picture.tsx","hooks/useIsScrolling.tsx","hooks/useAutoplay.tsx","components/player/media/Gif.tsx","components/player/media/Video.tsx","components/player/Media.tsx","hooks/useSources.tsx"],"names":["handlers","observer","IntersectionObserver","entries","forEach","entry","handler","find","h","element","target","update","isIntersecting","threshold","useIsOnScreen","React","useState","isOnScreen","setOnScreen","onIsOnScreenChange","useCallback","value","useEffect","push","observe","filter","unobserve","fadeOut","keyframes","Slider","styled","input","$controls","$accent","theme","css","props","colors","layerBg","accentColor","backgroundColor2","trackStyle","commonStyle","thumbStyle","MorphSvg","svg","ToggleButton","InvisButton","dropShadow","dimensions","gutter","ToggleFullscreenButton","index","dispatch","useDispatch","history","useHistory","onFullscreenExit","event","stopPropagation","goBack","onFullscreenEnter","setFullscreenPost","RouteName","STORIES","location","pathname","onClick","title","color","Wrapper","div","flexRowWithGap","LinkButton","a","timings","transitionTime","DownloadButton","LinkList","fullSrc","handleDownload","download","href","rel","isVisible","VideoProgressBar","isPaused","videoRef","className","onChange","onEnded","sliderRef","useRef","useTheme","handleChange","newValue","Number","handleClick","addEventListener","removeEventListener","handle","requestAnimationFrame","step","current","currentTime","toString","chromePercentage","Math","round","duration","style","backgroundImage","cancelAnimationFrame","ref","type","min","max","AutoProgressBar","onFinished","NO_OP","isActive","mouseState","setMouseState","setPost","newIndex","useSelector","selectAutoscrollDelay","listener","document","then","Date","getTime","renderFrame","now","PlayButton","name","viewBox","xmlns","x","y","width","height","LengthDisplay","span","spacing","ForwardArea","BackwardArea","ImageOverlay","isFullscreen","GifOverlay","onTogglePaused","VideoOverlay","onSeek","handleSkipForward","e","preventDefault","handleSkipBackward","onDoubleClick","tabIndex","formatDuration","getOverlayContent","Overlay","setVisible","toggleVisible","FlexVideo","video","flexMedia","preserveAspectRatio","PostVideo","mediaStyle","PostImage","FlexImage","Picture","viewSrc","onLoad","src","alt","loading","timeoutId","isScrollingGlobal","observers","useAutoplay","playing","setPlaying","autoPlay","selectAutoPlay","isScrolling","setIsScrolling","undefined","clearTimeout","setTimeout","passive","length","useIsScrolling","Gif","thumbnailSrc","detailsVisible","overlayVisible","setOverlayVisible","playState","setPlayState","gifRef","setGifRef","prefAutoplay","preload","selectPreloadGifs","usedSource","play","pause","togglePlay","Image","Video","setVideoRef","selectPreloadVideos","paused","message","includes","console","warn","error","err","handleSeek","controls","loop","onLoadedMetadata","Media","sampleSrc","loadOriginals","selectOriginals","useMemo","useSources","preview"],"mappings":"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","file":"static/js/0.553619b4.chunk.js","sourcesContent":["import React from 'react'\r\n\r\n// List of handlers paired with the target element for identification\r\nlet handlers: Array<{ element: Element; update: (isOnScreen: boolean) => void }> = []\r\n\r\n// global handler that can handle multiple entires at the same time\r\nconst handleOnScreenChange = (entries: IntersectionObserverEntry[]) => {\r\n  entries.forEach((entry) => {\r\n    const handler = handlers.find((h) => h.element === entry.target)\r\n\r\n    if (handler) {\r\n      handler.update(entry.isIntersecting)\r\n    }\r\n  })\r\n}\r\n\r\n// single observer\r\nconst observer = new IntersectionObserver(handleOnScreenChange, { threshold: 1 })\r\n\r\n/**\r\n * Provides a boolean value indicating whether the {@link target} is fully visible on screen\r\n */\r\nexport default function useIsOnScreen(target: Element | null) {\r\n  const [isOnScreen, setOnScreen] = React.useState(false)\r\n\r\n  const onIsOnScreenChange = React.useCallback((value: boolean) => {\r\n    setOnScreen(value)\r\n  }, [])\r\n\r\n  React.useEffect(() => {\r\n    if (target) {\r\n      const handler = { element: target, update: onIsOnScreenChange }\r\n      handlers.push(handler)\r\n      observer.observe(target)\r\n\r\n      return () => {\r\n        handlers.filter((h) => h !== handler)\r\n        observer.unobserve(target)\r\n      }\r\n    }\r\n  }, [onIsOnScreenChange, target])\r\n\r\n  return [isOnScreen]\r\n}\r\n","import { keyframes } from 'styled-components'\n\nexport const fadeOut = keyframes`\n  from {\n    opacity: 1;\n  }\n\n  to {\n    opacity: 0;\n  }\n`\n","import styled, { DefaultTheme, css } from 'styled-components'\r\n\r\nfunction thumbStyle({ $controls, theme }: { $controls: boolean; theme: DefaultTheme }) {\r\n  const commonStyle = css`\r\n    height: 16px;\r\n    width: 16px;\r\n    border-radius: 100px;\r\n    background: ${$controls ? theme.colors.backgroundColor2 : 'transparent'};\r\n    cursor: pointer;\r\n  `\r\n\r\n  return css`\r\n    &::-webkit-slider-thumb {\r\n      -webkit-appearance: none;\r\n      ${commonStyle}\r\n    }\r\n\r\n    &::-moz-range-thumb {\r\n      ${commonStyle}\r\n    }\r\n\r\n    &::-ms-thumb {\r\n      ${commonStyle}\r\n    }\r\n  `\r\n}\r\n\r\nfunction trackStyle({ $accent, theme }: { $accent: boolean; theme: DefaultTheme }) {\r\n  return css`\r\n    -webkit-appearance: none;\r\n    flex-grow: 1;\r\n    background: ${(props) => props.theme.colors.layerBg};\r\n    border-radius: 100px;\r\n    height: 6px;\r\n\r\n    &::-moz-range-progress {\r\n      background-color: ${$accent ? theme.colors.accentColor : theme.colors.backgroundColor2};\r\n    }\r\n\r\n    &::-ms-fill-lower {\r\n      background-color: ${$accent ? theme.colors.accentColor : theme.colors.backgroundColor2};\r\n    }\r\n  `\r\n}\r\n\r\nexport const Slider = styled.input(\r\n  ({ $controls, $accent, theme }: { $controls: boolean; $accent: boolean; theme: DefaultTheme }) => css`\r\n    ${trackStyle({ $accent, theme })}\r\n    ${thumbStyle({ $controls, theme })}\r\n  `\r\n)\r\n","import React, { MouseEventHandler } from 'react'\r\nimport styled from 'styled-components'\r\n\r\ninterface PlayPauseIconProps {\r\n  className?: string\r\n  isPaused: boolean\r\n  onClick: MouseEventHandler<SVGElement>\r\n}\r\n\r\nconst MorphSvg = styled.svg`\r\n  > rect {\r\n    transition: all 0.2s ease-in;\r\n  }\r\n\r\n  &.play {\r\n    .left {\r\n      clip-path: path('M1.61 0 L10.1 4.9 L10.1 19.1 L1.61 24');\r\n    }\r\n\r\n    .right {\r\n      clip-path: path('M22.39 12 L9.9 4.79 L9.9 19.21 L22.39 12');\r\n    }\r\n  }\r\n\r\n  &.pause {\r\n    .left {\r\n      clip-path: path('M4.8 0 L10 0 L10 24 L4.8 24');\r\n    }\r\n\r\n    .right {\r\n      clip-path: path('M19.2 0 L14 0 L14 24 L19.2 24');\r\n    }\r\n  }\r\n`\r\n\r\n/**\r\n * A button that fluidly transforms between a Play and a Pause icon based on isPaused.\r\n * Use onClick to update isPaused.\r\n * Additionally, this component takes a classname\r\n */\r\nexport function PlayPauseIcon(props: PlayPauseIconProps) {\r\n  const { onClick, className = '', isPaused } = props\r\n\r\n  return (\r\n    <MorphSvg\r\n      name='Play/Pause'\r\n      viewBox='0 0 24 24'\r\n      xmlns='http://www.w3.org/2000/svg'\r\n      onClick={onClick}\r\n      className={`${className} ${isPaused ? 'play' : 'pause'}`}\r\n    >\r\n      <rect className='left' color='currentColor' x='0' y='0' width='24' height=' 24' />\r\n      <rect className='right' color='currentColor' x='0' y='0' width='24' height=' 24' />\r\n    </MorphSvg>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { useDispatch } from 'react-redux'\r\nimport { useHistory } from 'react-router-dom'\r\nimport styled, { css } from 'styled-components'\r\nimport { RouteName } from '../../data/types'\r\nimport { ExpandIcon, CloseIcon } from '../../icons/FontAwesomeIcons'\r\nimport { setFullscreenPost } from '../../redux/actions'\r\nimport { dropShadow } from '../../styled/mixins'\r\nimport { InvisButton } from '../designsystem/Buttons'\r\n\r\nconst ToggleButton = styled(InvisButton)(\r\n  ({ theme }) => css`\r\n    grid-area: 1/1/2/2;\r\n    place-self: start start;\r\n    ${dropShadow}\r\n    padding: ${theme.dimensions.gutter};\r\n    cursor: pointer;\r\n  `\r\n)\r\n\r\ninterface ToggleFullscreenButtonProps {\r\n  index: number\r\n}\r\n\r\nexport default function ToggleFullscreenButton(props: ToggleFullscreenButtonProps) {\r\n  const { index } = props\r\n\r\n  const dispatch = useDispatch()\r\n  const history = useHistory()\r\n\r\n  const onFullscreenExit = React.useCallback<React.MouseEventHandler>(\r\n    (event) => {\r\n      event.stopPropagation()\r\n      history.goBack()\r\n    },\r\n    [history]\r\n  )\r\n\r\n  const onFullscreenEnter = React.useCallback<React.MouseEventHandler>(\r\n    (event) => {\r\n      event.stopPropagation()\r\n      dispatch(setFullscreenPost(index))\r\n      history.push(RouteName.STORIES)\r\n    },\r\n    [dispatch, history, index]\r\n  )\r\n\r\n  return history.location.pathname === RouteName.STORIES ? (\r\n    <ToggleButton onClick={onFullscreenExit} aria-label='Exit fullscreen' title='Exit fullscreen'>\r\n      <CloseIcon color='white' />\r\n    </ToggleButton>\r\n  ) : (\r\n    <ToggleButton onClick={onFullscreenEnter} aria-label='Enter fullscreen' title='Enter fullscreen'>\r\n      <ExpandIcon color='white' />\r\n    </ToggleButton>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport styled, { css } from 'styled-components'\r\nimport { download } from '../../data/utils'\r\nimport { DownloadIcon, ExternalLinkIcon } from '../../icons/FontAwesomeIcons'\r\nimport { dropShadow, flexRowWithGap } from '../../styled/mixins'\r\nimport { InvisButton } from '../designsystem/Buttons'\r\n\r\nconst Wrapper = styled.div(\r\n  ({ theme }) => css`\r\n    grid-area: 3/1/4/2;\r\n    ${flexRowWithGap}\r\n    place-self: end start;\r\n    place-items: start center;\r\n  `\r\n)\r\n\r\nconst LinkButton = styled.a(\r\n  ({ theme }) => css`\r\n    padding: ${theme.dimensions.gutter};\r\n    cursor: pointer;\r\n    ${dropShadow({ theme })}\r\n\r\n    svg {\r\n      transition: all ${theme.timings.transitionTime} ease-out;\r\n    }\r\n  `\r\n)\r\n\r\nconst DownloadButton = styled(InvisButton)`\r\n  cursor: pointer;\r\n`\r\n\r\ninterface LinkListProps {\r\n  fullSrc: string\r\n}\r\n\r\nexport default function LinkList(props: LinkListProps) {\r\n  const { fullSrc } = props\r\n\r\n  const handleDownload = React.useCallback<React.MouseEventHandler>(\r\n    (event) => {\r\n      event.stopPropagation()\r\n      download(fullSrc)\r\n    },\r\n    [fullSrc]\r\n  )\r\n\r\n  return (\r\n    <Wrapper>\r\n      <LinkButton href={fullSrc} target='_blank' rel='noopener noreferrer' aria-label='Open In New Tab' title={fullSrc}>\r\n        <ExternalLinkIcon color='white' title='Open image in new tab' />\r\n      </LinkButton>\r\n\r\n      <DownloadButton aria-label='Download Image' onClick={handleDownload} title={fullSrc}>\r\n        <DownloadIcon color='white' />\r\n      </DownloadButton>\r\n    </Wrapper>\r\n  )\r\n}\r\n","import styled, { css } from 'styled-components'\nimport { fadeOut } from '../../styled/animations'\nimport { formatDuration } from '../../misc/formatting'\nimport { ProgressBar } from './ProgressBar'\nimport { dropShadow } from '../../styled/mixins'\nimport { PlayPauseIcon } from '../../icons/PlayPauseIcon'\nimport ToggleFullscreenButton from './ToggleFullscreenButton'\nimport LinkList from './LinkList'\nimport React, { useCallback } from 'react'\nimport FullscreenProgressBar from './FullscreenProgressBar'\nimport { BackwardIcon, ForwardIcon } from '../../icons/FontAwesomeIcons'\n\nfunction overlayVisibility({ isVisible }: { isVisible: boolean }) {\n  return isVisible\n    ? css``\n    : css`\n        opacity: 0;\n        animation: ${fadeOut} 0.4s ease-in;\n      `\n}\n\nconst Wrapper = styled.div`\n  grid-area: 1/1/2/2;\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  grid-template-rows: auto 1fr auto auto;\n  z-index: 1;\n\n  ${overlayVisibility};\n`\n\nconst VideoProgressBar = styled(ProgressBar)(\n  ({ theme }) => css`\n    grid-area: 4/1/4/4;\n    margin: ${theme.dimensions.gutter};\n  `\n)\n\nconst AutoProgressBar = styled(FullscreenProgressBar)(\n  ({ theme }) => css`\n    grid-area: 4/1/4/4;\n    margin: ${theme.dimensions.gutter};\n  `\n)\n\nconst PlayButton = styled(PlayPauseIcon)`\n  height: 50px;\n  width: 50px;\n  grid-area: 2/2/3/3;\n  place-self: center center;\n  cursor: pointer;\n  fill: white;\n  ${dropShadow}\n`\n\nconst LengthDisplay = styled.span(\n  (props) => css`\n    grid-area: 3/3/4/4;\n    place-self: end end;\n    background: #00000080;\n    color: white;\n    border-radius: 4px;\n    padding: ${props.theme.dimensions.spacing};\n    margin: ${props.theme.dimensions.gutter};\n  `\n)\n\nconst ForwardArea = styled.div`\n  display: grid;\n  grid-area: 2/3/3/4;\n  place-items: center;\n  opacity: 0;\n`\n\nconst BackwardArea = styled.div`\n  display: grid;\n  grid-area: 2/1/3/2;\n  place-items: center;\n  opacity: 0;\n`\n\ntype ImageOverlayProps = {\n  type: 'image'\n  index: number\n  fullSrc: string\n  isFullscreen: boolean\n  onFinished?: () => void\n  isActive: boolean\n}\n\ntype GifOverlayProps = {\n  type: 'gif'\n  index: number\n  fullSrc: string\n  isPaused: boolean\n  onTogglePaused: React.MouseEventHandler\n  isFullscreen: boolean\n  onFinished?: () => void\n  isActive: boolean\n}\n\ntype VideoOverlayProps = {\n  type: 'video'\n  index: number\n  fullSrc: string\n  isPaused: boolean\n  duration: number\n  onTogglePaused: React.MouseEventHandler\n  onSeek: (value: number) => void\n  videoRef: HTMLVideoElement | null\n  isFullscreen: boolean\n  onFinished?: () => void\n  isActive: boolean\n}\n\ntype OverlayProps = (ImageOverlayProps | VideoOverlayProps | GifOverlayProps) & {\n  isVisible: boolean\n  setVisible: (value: boolean) => void\n}\n\nexport function ImageOverlay(props: Omit<ImageOverlayProps, 'type'>) {\n  const { index, fullSrc, isFullscreen, isActive, onFinished } = props\n\n  return (\n    <>\n      <ToggleFullscreenButton index={index} />\n      <LinkList fullSrc={fullSrc} />\n      {isFullscreen && <AutoProgressBar index={index} onFinished={onFinished} isActive={isActive} />}\n    </>\n  )\n}\n\nfunction GifOverlay(props: Omit<GifOverlayProps, 'type'>) {\n  const { fullSrc, isPaused, index, onTogglePaused, isFullscreen, isActive, onFinished } = props\n\n  return (\n    <>\n      <ToggleFullscreenButton index={index} />\n      <LinkList fullSrc={fullSrc} />\n      <PlayButton isPaused={isPaused} onClick={onTogglePaused} aria-label='Play/Pause' />\n      {isFullscreen && (\n        <AutoProgressBar index={index} isPaused={isPaused} onFinished={onFinished} isActive={isActive} />\n      )}\n      <LengthDisplay>GIF</LengthDisplay>\n    </>\n  )\n}\n\nfunction VideoOverlay(props: Omit<VideoOverlayProps, 'type'>) {\n  const { fullSrc, isPaused, index, onTogglePaused, onSeek, duration, videoRef, isActive, onFinished } = props\n\n  const handleSkipForward = useCallback(\n    (e) => {\n      e.preventDefault()\n      if (videoRef) {\n        onSeek(videoRef.currentTime + 10)\n      }\n    },\n    [onSeek, videoRef]\n  )\n\n  const handleSkipBackward = useCallback(\n    (e) => {\n      e.preventDefault()\n      if (videoRef) {\n        onSeek(videoRef.currentTime - 10)\n      }\n    },\n    [onSeek, videoRef]\n  )\n\n  return (\n    <>\n      <ToggleFullscreenButton index={index} />\n      <LinkList fullSrc={fullSrc} />\n      <BackwardArea onDoubleClick={handleSkipBackward}>\n        <BackwardIcon tabIndex={0} />\n      </BackwardArea>\n      <PlayButton isPaused={isPaused || !isActive} onClick={onTogglePaused} aria-label='Play/Pause' />\n      <ForwardArea onDoubleClick={handleSkipForward}>\n        <ForwardIcon tabIndex={0} />\n      </ForwardArea>\n      <LengthDisplay>{formatDuration(duration)}</LengthDisplay>\n      <VideoProgressBar isPaused={isPaused || !isActive} videoRef={videoRef} onChange={onSeek} onEnded={onFinished} />\n    </>\n  )\n}\n\nfunction getOverlayContent(props: OverlayProps) {\n  switch (props.type) {\n    case 'image':\n      return <ImageOverlay {...props} />\n    case 'gif':\n      return <GifOverlay {...props} />\n    case 'video':\n      return <VideoOverlay {...props} />\n  }\n}\n\nexport function Overlay(props: OverlayProps) {\n  const { isVisible, setVisible } = props\n\n  const toggleVisible = React.useCallback(() => setVisible(!isVisible), [isVisible, setVisible])\n\n  return (\n    <Wrapper isVisible={isVisible} onClick={toggleVisible} data-testid='overlay-wrapper' data-name='overlay'>\n      {getOverlayContent(props)}\n    </Wrapper>\n  )\n}\n","import React, { ChangeEventHandler, MouseEventHandler, useCallback } from 'react'\r\nimport { useTheme } from 'styled-components'\r\nimport { Slider } from '../designsystem/Slider'\r\n\r\ninterface ProgressBarProps {\r\n  isPaused: boolean\r\n  videoRef: HTMLVideoElement | null\r\n  onChange: (newValue: number) => void\r\n  className?: string\r\n  onEnded?: () => void\r\n}\r\n\r\nexport const ProgressBar = (props: ProgressBarProps) => {\r\n  const { isPaused, videoRef, className, onChange, onEnded } = props\r\n\r\n  const sliderRef = React.useRef<HTMLInputElement>(null)\r\n\r\n  const theme = useTheme()\r\n\r\n  const handleChange: ChangeEventHandler<HTMLInputElement> = useCallback(\r\n    (event) => {\r\n      const newValue = Number(event.target.value)\r\n      onChange(newValue)\r\n    },\r\n    [onChange]\r\n  )\r\n\r\n  const handleClick: MouseEventHandler = useCallback((event) => {\r\n    event.stopPropagation()\r\n  }, [])\r\n\r\n  React.useEffect(() => {\r\n    if (onEnded && videoRef) {\r\n      videoRef.addEventListener('ended', onEnded)\r\n\r\n      return () => videoRef.removeEventListener('ended', onEnded)\r\n    }\r\n  })\r\n\r\n  React.useEffect(() => {\r\n    if (!isPaused) {\r\n      let handle: number\r\n\r\n      const step = () => {\r\n        if (sliderRef?.current && videoRef) {\r\n          sliderRef.current.value = videoRef.currentTime.toString()\r\n          const chromePercentage = Math.round((videoRef.currentTime / videoRef.duration) * 100)\r\n          sliderRef.current.style.backgroundImage = `linear-gradient(90deg, ${theme.colors.accentColor} ${chromePercentage}%, transparent ${chromePercentage}%)`\r\n        }\r\n\r\n        handle = requestAnimationFrame(step)\r\n      }\r\n\r\n      handle = requestAnimationFrame(step)\r\n\r\n      return () => {\r\n        cancelAnimationFrame(handle)\r\n      }\r\n    }\r\n  }, [isPaused, theme.colors.accentColor, theme.colors.backgroundColor2, videoRef])\r\n\r\n  return (\r\n    <Slider\r\n      ref={sliderRef}\r\n      type='range'\r\n      step={0.034}\r\n      min={0}\r\n      max={videoRef?.duration || 0}\r\n      onChange={handleChange}\r\n      className={className}\r\n      onClick={handleClick}\r\n      $controls\r\n      $accent\r\n    />\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { NO_OP } from '../../data/types'\r\nimport { setFullscreenPost } from '../../redux/actions'\r\nimport { selectAutoscrollDelay } from '../../redux/selectors'\r\nimport { Slider } from '../designsystem/Slider'\r\n\r\ninterface FullscreenProgressBarProps {\r\n  className?: string\r\n  index: number\r\n  isPaused?: boolean\r\n  onFinished?: () => void\r\n  isActive: boolean\r\n}\r\n\r\nexport default function FullscreenProgressBar(props: FullscreenProgressBarProps) {\r\n  const { onFinished = NO_OP, isActive } = props\r\n\r\n  const dispatch = useDispatch()\r\n  const [mouseState, setMouseState] = React.useState(false)\r\n  const setPost = React.useCallback((newIndex) => dispatch(setFullscreenPost(newIndex)), [dispatch])\r\n  const duration = 1000 * useSelector(selectAutoscrollDelay)\r\n  const ref = React.useRef<HTMLInputElement>(null)\r\n\r\n  React.useEffect(() => {\r\n    const listener = () => setMouseState(true)\r\n    document.addEventListener('mousedown', listener)\r\n    document.addEventListener('touchstart', listener)\r\n\r\n    return () => {\r\n      document.removeEventListener('mousedown', listener)\r\n      document.removeEventListener('touchstart', listener)\r\n    }\r\n  })\r\n\r\n  React.useEffect(() => {\r\n    const listener = () => setMouseState(false)\r\n    document.addEventListener('mouseup', listener)\r\n    document.addEventListener('touchend', listener)\r\n\r\n    return () => {\r\n      document.removeEventListener('mouseup', listener)\r\n      document.removeEventListener('touchend', listener)\r\n    }\r\n  })\r\n\r\n  React.useEffect(() => {\r\n    if (!mouseState && isActive) {\r\n      let handle: number\r\n      let then = new Date().getTime()\r\n\r\n      const renderFrame = () => {\r\n        if (ref.current) {\r\n          const now = new Date().getTime()\r\n          const newValue = Number(ref.current.value) + (now - then)\r\n          then = now\r\n\r\n          ref.current.value = newValue.toString()\r\n          const chromePercentage = Math.round((newValue / duration) * 100)\r\n          ref.current.style.backgroundImage = `linear-gradient(90deg, #ffffff80 ${chromePercentage}%, transparent ${chromePercentage}%)`\r\n\r\n          if (newValue >= Number(ref.current.max)) {\r\n            onFinished()\r\n            if (ref.current) {\r\n              ref.current.value = '0'\r\n            }\r\n          } else {\r\n            handle = requestAnimationFrame(renderFrame)\r\n          }\r\n        }\r\n      }\r\n\r\n      handle = requestAnimationFrame(renderFrame)\r\n\r\n      return () => {\r\n        cancelAnimationFrame(handle)\r\n      }\r\n    }\r\n  }, [duration, isActive, mouseState, onFinished, props.index, setPost])\r\n\r\n  return (\r\n    <Slider\r\n      ref={ref}\r\n      type='range'\r\n      step={0.034}\r\n      min={0}\r\n      max={duration}\r\n      onChange={NO_OP}\r\n      onClick={NO_OP}\r\n      $controls={false}\r\n      $accent={false}\r\n      className={props.className}\r\n    />\r\n  )\r\n}\r\n","import styled from 'styled-components'\nimport { flexMedia, preserveAspectRatio } from '../../styled/mixins'\n\nconst FlexVideo = styled.video`\n  ${flexMedia}\n  ${preserveAspectRatio}\n  grid-area: 1/1/2/2;\n`\n\nexport default FlexVideo\n","import styled from 'styled-components'\r\nimport { mediaStyle } from '../../../styled/mixins'\r\nimport FlexImage from '../../designsystem/FlexImage'\r\nimport FlexVideo from '../../designsystem/FlexVideo'\r\n\r\nexport const PostVideo = styled(FlexVideo)`\r\n  ${mediaStyle}\r\n`\r\n\r\nexport const PostImage = styled(FlexImage)`\r\n  ${mediaStyle}\r\n`\r\n","import React from 'react'\r\nimport { NO_OP } from '../../../data/types'\r\nimport { Overlay } from '../Overlay'\r\nimport { PostImage } from './StyledMedia'\r\n\r\ninterface PictureProps {\r\n  viewSrc: string\r\n  fullSrc: string\r\n  onLoad?: () => void\r\n  width: number\r\n  height: number\r\n  index: number\r\n  isFullscreen: boolean\r\n  onFinished?: () => void\r\n  isActive: boolean\r\n}\r\n\r\nexport default function Picture(props: PictureProps) {\r\n  const { viewSrc, fullSrc, index, onLoad = NO_OP, width, height, isFullscreen, isActive, onFinished } = props\r\n\r\n  return (\r\n    <>\r\n      <PostImage\r\n        data-testid='image'\r\n        src={viewSrc}\r\n        alt={viewSrc}\r\n        onLoad={onLoad}\r\n        loading='lazy'\r\n        width={width}\r\n        height={height}\r\n      />\r\n      <Overlay\r\n        type='image'\r\n        fullSrc={fullSrc}\r\n        index={index}\r\n        isVisible={true}\r\n        setVisible={NO_OP}\r\n        isFullscreen={isFullscreen}\r\n        onFinished={onFinished}\r\n        isActive={isActive}\r\n      />\r\n    </>\r\n  )\r\n}\r\n","import React from 'react'\r\n\r\nlet isScrollingGlobal = false\r\nlet observers: React.Dispatch<React.SetStateAction<boolean>>[] = []\r\nlet listener: ((e: any) => void) | undefined\r\nlet timeoutId: NodeJS.Timeout | undefined\r\n\r\nexport const useIsScrolling = () => {\r\n  const [isScrolling, setIsScrolling] = React.useState(isScrollingGlobal)\r\n\r\n  if (listener === undefined) {\r\n    listener = (e) => {\r\n      isScrollingGlobal = true\r\n      observers.forEach((update) => update(isScrollingGlobal))\r\n\r\n      if (timeoutId) clearTimeout(timeoutId)\r\n\r\n      timeoutId = setTimeout(() => {\r\n        isScrollingGlobal = false\r\n        observers.forEach((update) => update(isScrollingGlobal))\r\n      }, 500)\r\n    }\r\n    document.addEventListener('scroll', listener, { passive: true })\r\n  }\r\n\r\n  React.useEffect(() => {\r\n    observers.push(setIsScrolling)\r\n    setIsScrolling(isScrollingGlobal)\r\n    return () => {\r\n      observers = observers.filter((update) => update !== setIsScrolling)\r\n\r\n      if (observers.length === 0 && listener) {\r\n        document.removeEventListener('scroll', listener)\r\n        listener = undefined\r\n      }\r\n    }\r\n  }, [])\r\n\r\n  // return global isOnline state and setter function\r\n  return isScrolling\r\n}\r\n","import React from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport { selectAutoPlay } from '../redux/selectors'\r\nimport useIsOnScreen from './useIsOnScreen'\r\nimport { useIsScrolling } from './useIsScrolling'\r\n\r\nexport function useAutoplay(ref: Element | null) {\r\n  const [playing, setPlaying] = React.useState(false)\r\n\r\n  const autoPlay = useSelector(selectAutoPlay)\r\n  const [isOnScreen] = useIsOnScreen(ref)\r\n  const isScrolling = useIsScrolling()\r\n\r\n  React.useEffect(() => {\r\n    if (autoPlay && isOnScreen && !isScrolling) {\r\n      setPlaying(true)\r\n    }\r\n  }, [autoPlay, isOnScreen, isScrolling])\r\n\r\n  React.useEffect(() => {\r\n    if (!isOnScreen) {\r\n      setPlaying(false)\r\n    }\r\n  }, [isOnScreen])\r\n\r\n  return playing\r\n}\r\n","import React, { useEffect, useState } from 'react'\nimport { NO_OP } from '../../../data/types'\nimport MediaProps from './MediaProps'\nimport { Overlay } from '../Overlay'\nimport { PostImage } from './StyledMedia'\nimport { useSelector } from 'react-redux'\nimport { selectAutoPlay, selectPreloadGifs } from '../../../redux/selectors'\nimport { useAutoplay } from '../../../hooks/useAutoplay'\n\nexport default function Gif(props: MediaProps) {\n  const {\n    viewSrc,\n    thumbnailSrc,\n    fullSrc,\n    onLoad = NO_OP,\n    index,\n    width,\n    height,\n    detailsVisible,\n    isFullscreen,\n    onFinished,\n    isActive,\n  } = props\n\n  const [overlayVisible, setOverlayVisible] = React.useState(true)\n\n  // user play\n  const [playState, setPlayState] = useState(false)\n\n  // auto play\n  const [gifRef, setGifRef] = useState<HTMLImageElement | null>(null)\n  const prefAutoplay = useSelector(selectAutoPlay)\n  const autoPlay = useAutoplay(gifRef)\n  // Preloading\n  const preload = useSelector(selectPreloadGifs)\n\n  const usedSource = playState ? viewSrc : thumbnailSrc\n\n  const play = React.useCallback(async () => {\n    setPlayState(true)\n  }, [])\n\n  const pause = React.useCallback(() => {\n    setPlayState(false)\n  }, [])\n\n  const togglePlay: React.MouseEventHandler = React.useCallback(\n    (e) => {\n      e.stopPropagation()\n      if (playState) {\n        setPlayState(false)\n      } else {\n        setPlayState(true)\n        setOverlayVisible(false)\n      }\n    },\n    [playState]\n  )\n\n  React.useEffect(() => {\n    if (prefAutoplay) {\n      if (autoPlay) {\n        setPlayState(true)\n      }\n    }\n\n    if (!autoPlay) {\n      setPlayState(false)\n    }\n  }, [autoPlay, pause, play, prefAutoplay])\n\n  useEffect(() => {\n    if (preload) {\n      const loader = new Image()\n      loader.src = viewSrc\n    }\n  })\n\n  return (\n    <>\n      <PostImage\n        data-testid='gif'\n        ref={setGifRef}\n        src={usedSource}\n        alt={usedSource}\n        loading='lazy'\n        onLoad={onLoad}\n        width={width}\n        height={height}\n      />\n\n      <Overlay\n        isVisible={!playState || overlayVisible || detailsVisible}\n        setVisible={setOverlayVisible}\n        type='gif'\n        fullSrc={fullSrc}\n        index={index}\n        isPaused={!playState}\n        onTogglePaused={togglePlay}\n        isFullscreen={isFullscreen}\n        onFinished={onFinished}\n        isActive={isActive}\n      />\n    </>\n  )\n}\n","import React, { useState } from 'react'\nimport { useSelector } from 'react-redux'\nimport { NO_OP } from '../../../data/types'\nimport { selectAutoPlay, selectPreloadVideos } from '../../../redux/selectors'\nimport MediaProps from './MediaProps'\nimport { Overlay } from '../Overlay'\nimport { PostVideo } from './StyledMedia'\nimport { useAutoplay } from '../../../hooks/useAutoplay'\n\nexport default function Video(props: MediaProps) {\n  const {\n    viewSrc,\n    fullSrc,\n    onLoad = NO_OP,\n    index,\n    width,\n    height,\n    detailsVisible,\n    isFullscreen,\n    isActive,\n    onFinished,\n  } = props\n\n  const [playState, setPlayState] = useState(false)\n\n  const [overlayVisible, setOverlayVisible] = React.useState(true)\n  const [videoRef, setVideoRef] = useState<HTMLVideoElement | null>(null)\n\n  const autoPlay = useAutoplay(videoRef)\n\n  const preload = useSelector(selectPreloadVideos) ? 'auto' : 'metadata'\n  const prefAutoplay = useSelector(selectAutoPlay)\n\n  const play = React.useCallback(async () => {\n    if (videoRef?.paused) {\n      try {\n        await videoRef.play()\n        setPlayState(true)\n      } catch (err) {\n        if ((err as DOMException).message.includes(\"user didn't interact with the document first\")) {\n          // Modern browsers prevent playing of videos before the use has interacted with the page in some form\n          console.warn('Autoplay failed because the user did not interact with the page first:', err)\n        } else if ((err as DOMException).message.includes('play() request was interrupted by a call to pause()')) {\n          // This happens when you scrollfast with autoplay enabled.\n          // The videos attempt to play but before they actually start you already scroll on\n          // and they get paused as they move offscreen.\n          console.warn('Play was interrupted by pause', err)\n        } else {\n          console.error('Failed to start video:', err)\n        }\n      }\n    }\n  }, [videoRef])\n\n  const pause = React.useCallback(() => {\n    if (!videoRef?.paused) {\n      try {\n        videoRef?.pause()\n        setPlayState(false)\n      } catch (err) {\n        console.error('Failed to start video:', err)\n      }\n    }\n  }, [videoRef])\n\n  const handleSeek = React.useCallback(\n    (value: number) => {\n      if (videoRef) {\n        videoRef.currentTime = value\n      }\n    },\n    [videoRef]\n  )\n\n  // user play\n  const togglePlay: React.MouseEventHandler = React.useCallback(\n    (e) => {\n      e.stopPropagation()\n      if (videoRef) {\n        if (videoRef.paused) {\n          play()\n          setOverlayVisible(false)\n        } else {\n          pause()\n        }\n      }\n    },\n    [pause, play, videoRef]\n  )\n\n  React.useEffect(() => {\n    if (prefAutoplay) {\n      if (autoPlay) {\n        play()\n      }\n    }\n\n    if (!autoPlay) {\n      pause()\n    }\n  }, [autoPlay, pause, play, prefAutoplay])\n\n  return (\n    <>\n      <PostVideo\n        data-testid='video'\n        controls={false}\n        loop={!isFullscreen}\n        preload={preload}\n        ref={setVideoRef}\n        onLoadedMetadata={onLoad}\n        width={width}\n        height={height}\n        src={viewSrc}\n      />\n      <Overlay\n        type='video'\n        index={index}\n        fullSrc={fullSrc}\n        isPaused={!playState}\n        duration={videoRef?.duration || 0}\n        onTogglePaused={togglePlay}\n        onSeek={handleSeek}\n        videoRef={videoRef}\n        isVisible={!playState || detailsVisible || overlayVisible}\n        setVisible={setOverlayVisible}\n        isFullscreen={isFullscreen}\n        onFinished={onFinished}\n        isActive={isActive}\n      />\n    </>\n  )\n}\n","import * as r34 from 'r34-types'\r\nimport React from 'react'\r\nimport Picture from './media/Picture'\r\nimport Gif from './media/Gif'\r\nimport Video from './media/Video'\r\nimport { useSources } from '../../hooks/useSources'\r\n\r\ntype MediaProps = {\r\n  type: r34.PostType\r\n  index: number\r\n  thumbnailSrc: string\r\n  sampleSrc: string\r\n  fullSrc: string\r\n  onLoad: () => void\r\n  width: number\r\n  height: number\r\n  detailsVisible: boolean\r\n  isFullscreen?: boolean\r\n  onFinished?: () => void\r\n  isActive?: boolean\r\n}\r\n\r\nexport function Media(props: MediaProps) {\r\n  const {\r\n    type,\r\n    thumbnailSrc,\r\n    sampleSrc,\r\n    fullSrc,\r\n    index,\r\n    onLoad,\r\n    width,\r\n    height,\r\n    detailsVisible,\r\n    isFullscreen = false,\r\n    onFinished,\r\n    isActive = false,\r\n  } = props\r\n  const [preview, src] = useSources(type, thumbnailSrc, sampleSrc, fullSrc)\r\n\r\n  switch (type) {\r\n    case 'image':\r\n      return (\r\n        <Picture\r\n          viewSrc={src}\r\n          fullSrc={fullSrc}\r\n          onLoad={onLoad}\r\n          index={index}\r\n          width={width}\r\n          height={height}\r\n          isFullscreen={isFullscreen}\r\n          onFinished={onFinished}\r\n          isActive={isActive}\r\n        />\r\n      )\r\n    case 'gif':\r\n      return (\r\n        <Gif\r\n          detailsVisible={detailsVisible}\r\n          viewSrc={src}\r\n          thumbnailSrc={preview}\r\n          fullSrc={fullSrc}\r\n          onLoad={onLoad}\r\n          index={index}\r\n          width={width}\r\n          height={height}\r\n          isFullscreen={isFullscreen}\r\n          onFinished={onFinished}\r\n          isActive={isActive}\r\n        />\r\n      )\r\n    case 'video':\r\n      return (\r\n        <Video\r\n          detailsVisible={detailsVisible}\r\n          viewSrc={src}\r\n          thumbnailSrc={preview}\r\n          fullSrc={fullSrc}\r\n          onLoad={onLoad}\r\n          index={index}\r\n          width={width}\r\n          height={height}\r\n          isFullscreen={isFullscreen}\r\n          onFinished={onFinished}\r\n          isActive={isActive}\r\n        />\r\n      )\r\n  }\r\n}\r\n","import React from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport { selectOriginals } from '../redux/selectors'\r\nimport * as r34 from 'r34-types'\r\n\r\nexport function useSources(type: r34.PostType, thumbnailSrc: string, sampleSrc: string, fullSrc: string) {\r\n  const loadOriginals = useSelector(selectOriginals)\r\n\r\n  return React.useMemo(() => {\r\n    switch (type) {\r\n      case 'image':\r\n        return loadOriginals ? ['', fullSrc] : ['', sampleSrc]\r\n      case 'gif':\r\n        return sampleSrc.includes('.gif') ? [thumbnailSrc, sampleSrc] : [sampleSrc, fullSrc]\r\n      case 'video':\r\n        return loadOriginals ? [thumbnailSrc, fullSrc] : [thumbnailSrc, sampleSrc]\r\n    }\r\n  }, [fullSrc, loadOriginals, sampleSrc, thumbnailSrc, type])\r\n}\r\n"],"sourceRoot":""}