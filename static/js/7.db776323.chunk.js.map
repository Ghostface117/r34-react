{"version":3,"sources":["styled/animations.tsx","hooks/useIsOnScreen.tsx","components/designsystem/Slider.tsx","icons/PlayPauseIcon.tsx","components/player/ToggleFullscreenButton.tsx","components/player/LinkList.tsx","components/player/FullscreenProgressBar.tsx","components/player/Overlay.tsx","components/player/ProgressBar.tsx","components/designsystem/FlexVideo.tsx","components/player/media/StyledMedia.ts","components/player/media/Picture.tsx","hooks/useIsScrolling.tsx","hooks/useAutoplay.tsx","components/player/media/Gif.tsx","components/player/media/Video.tsx","components/player/Media.tsx","hooks/useSources.tsx","components/layout/stories/Story.tsx","components/pages/Stories.tsx","hooks/useFullscreenCloseEffect.tsx"],"names":["fadeOut","keyframes","kofiWiggle","useIsOnScreen","target","options","useState","isOnScreen","setOnScreen","handleOnScreenChange","useCallback","entries","entry","isIntersecting","useEffect","observer","IntersectionObserver","threshold","root","observe","unobserve","Slider","styled","input","$controls","$accent","theme","css","props","colors","layerBg","accentColor","backgroundColor2","trackStyle","commonStyle","thumbStyle","MorphSvg","svg","ExpandButton","ExpandIcon","dropShadow","dimensions","gutter","CloseButton","CloseIcon","ToggleFullscreenButton","index","dispatch","useDispatch","history","useHistory","onFullscreenExit","React","event","stopPropagation","goBack","onFullscreenEnter","setFullscreenPost","push","RouteName","STORIES","location","pathname","color","onClick","title","Wrapper","div","DownloadButton","DownloadIcon","LinkList","fullSrc","handleDownload","download","href","rel","isVisible","VideoProgressBar","isPaused","videoRef","className","onChange","onEnded","sliderRef","useRef","useTheme","handleChange","newValue","Number","value","handleClick","addEventListener","removeEventListener","handle","requestAnimationFrame","step","current","currentTime","toString","chromePercentage","Math","round","duration","style","backgroundImage","cancelAnimationFrame","ref","type","min","max","AutoProgressBar","onFinished","NO_OP","isActive","mouseState","setMouseState","setPost","newIndex","listener","document","console","log","then","Date","getTime","renderFrame","now","PlayButton","viewBox","xmlns","x","y","width","height","LengthDisplay","span","spacing","ForwardArea","BackwardArea","ImageOverlay","isFullscreen","GifOverlay","onTogglePaused","VideoOverlay","onSeek","handleSkipForward","e","preventDefault","handleSkipBackward","onDoubleClick","tabIndex","formatDuration","getOverlayContent","Overlay","setVisible","toggleVisible","FlexVideo","video","flexMedia","preserveAspectRatio","PostVideo","mediaStyle","PostImage","FlexImage","Picture","viewSrc","onLoad","src","alt","loading","timeoutId","isScrollingGlobal","observers","useAutoplay","playing","setPlaying","autoPlay","useSelector","selectAutoPlay","isScrolling","setIsScrolling","undefined","forEach","update","clearTimeout","setTimeout","passive","filter","length","useIsScrolling","Gif","thumbnailSrc","detailsVisible","overlayVisible","setOverlayVisible","userPlay","setUserPlay","togglePlay","gifRef","setGifRef","isPlaying","preload","selectPreloadGifs","usedSource","Image","Video","setVideoRef","selectPreloadVideos","paused","play","pause","handleSeek","controls","loop","onLoadedMetadata","Media","sampleSrc","loadOriginals","selectOriginals","useMemo","includes","useSources","preview","Screen","Story","onInView","setRef","isInView","selectPostByIndex","preview_url","sample_url","file_url","id","StoriesWrapper","Filler","Stories","effect","setIndex","currentIdx","selectFullsceenIndex","nextIdx","indexes","scrollToNext","getElementById","scrollIntoView","behavior","handler","fullscreenElement","openFullscreen","map"],"mappings":"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","file":"static/js/7.db776323.chunk.js","sourcesContent":["import { keyframes } from 'styled-components'\n\nexport const fadeOut = keyframes`\n  from {\n    opacity: 1;\n  }\n\n  to {\n    opacity: 0;\n  }\n`\n\nexport const kofiWiggle = keyframes`\n  0% {\n    transform: rotate(0) scale(1);\n  }\n  60% {\n    transform: rotate(0) scale(1);\n  }\n  75% {\n    transform: rotate(0) scale(1.12);\n  }\n  80% {\n    transform: rotate(0) scale(1.1);\n  }\n  84% {\n    transform: rotate(-10deg) scale(1.1);\n  }\n  88% {\n    transform: rotate(10deg) scale(1.1);\n  }\n  92% {\n    transform: rotate(-10deg) scale(1.1);\n  }\n  96% {\n    transform: rotate(10deg) scale(1.1);\n  }\n  100% {\n    transform: rotate(0) scale(1);\n  }\n`\n","import { useCallback, useEffect, useState } from 'react'\r\n\r\nexport default function useIsOnScreen(target: Element | null, options?: IntersectionObserverInit) {\r\n  const [isOnScreen, setOnScreen] = useState(false)\r\n\r\n  const handleOnScreenChange = useCallback((entries: IntersectionObserverEntry[]) => {\r\n    const [entry] = entries\r\n    setOnScreen(entry.isIntersecting)\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    const observer = new IntersectionObserver(handleOnScreenChange, options || { threshold: 1, root: null })\r\n\r\n    if (target) {\r\n      observer.observe(target)\r\n    }\r\n\r\n    return () => {\r\n      if (target) {\r\n        observer.unobserve(target)\r\n      }\r\n    }\r\n  }, [handleOnScreenChange, options, target])\r\n\r\n  return [isOnScreen]\r\n}\r\n","import styled, { DefaultTheme, css } from 'styled-components'\r\n\r\nfunction thumbStyle({ $controls, theme }: { $controls: boolean; theme: DefaultTheme }) {\r\n  const commonStyle = css`\r\n    height: 16px;\r\n    width: 16px;\r\n    border-radius: 100px;\r\n    background: ${$controls ? theme.colors.backgroundColor2 : 'transparent'};\r\n    cursor: pointer;\r\n  `\r\n\r\n  return css`\r\n    &::-webkit-slider-thumb {\r\n      -webkit-appearance: none;\r\n      ${commonStyle}\r\n    }\r\n\r\n    &::-moz-range-thumb {\r\n      ${commonStyle}\r\n    }\r\n\r\n    &::-ms-thumb {\r\n      ${commonStyle}\r\n    }\r\n  `\r\n}\r\n\r\nfunction trackStyle({ $accent, theme }: { $accent: boolean; theme: DefaultTheme }) {\r\n  return css`\r\n    -webkit-appearance: none;\r\n    flex-grow: 1;\r\n    background: ${(props) => props.theme.colors.layerBg};\r\n    border-radius: 100px;\r\n    height: 6px;\r\n\r\n    &::-moz-range-progress {\r\n      background-color: ${$accent ? theme.colors.accentColor : theme.colors.backgroundColor2};\r\n    }\r\n\r\n    &::-ms-fill-lower {\r\n      background-color: ${$accent ? theme.colors.accentColor : theme.colors.backgroundColor2};\r\n    }\r\n  `\r\n}\r\n\r\nexport const Slider = styled.input(\r\n  ({ $controls, $accent, theme }: { $controls: boolean; $accent: boolean; theme: DefaultTheme }) => css`\r\n    ${trackStyle({ $accent, theme })}\r\n    ${thumbStyle({ $controls, theme })}\r\n  `\r\n)\r\n","import React, { MouseEventHandler } from 'react'\r\nimport styled from 'styled-components'\r\nimport { NO_OP } from '../data/types'\r\n\r\ninterface PlayPauseIconProps {\r\n  className?: string\r\n  isPaused: boolean\r\n  onClick: MouseEventHandler<SVGElement>\r\n}\r\n\r\nconst MorphSvg = styled.svg`\r\n  > rect {\r\n    transition: all 0.2s ease-in;\r\n  }\r\n\r\n  &.play {\r\n    .left {\r\n      clip-path: path('M1.61 0 L10.1 4.9 L10.1 19.1 L1.61 24');\r\n    }\r\n\r\n    .right {\r\n      clip-path: path('M22.39 12 L9.9 4.79 L9.9 19.21 L22.39 12');\r\n    }\r\n  }\r\n\r\n  &.pause {\r\n    .left {\r\n      clip-path: path('M4.8 0 L10 0 L10 24 L4.8 24');\r\n    }\r\n\r\n    .right {\r\n      clip-path: path('M19.2 0 L14 0 L14 24 L19.2 24');\r\n    }\r\n  }\r\n`\r\n\r\n/**\r\n * A button that fluidly transforms between a Play and a Pause icon based on isPaused.\r\n * Use onClick to update isPaused.\r\n * Additionally, this component takes a classname\r\n */\r\nexport function PlayPauseIcon(props: PlayPauseIconProps) {\r\n  const { onClick = NO_OP, className = '', isPaused } = props\r\n\r\n  return (\r\n    <MorphSvg\r\n      viewBox='0 0 24 24'\r\n      xmlns='http://www.w3.org/2000/svg'\r\n      onClick={onClick}\r\n      className={`${className} ${isPaused ? 'play' : 'pause'}`}\r\n    >\r\n      <rect className='left' color='currentColor' x='0' y='0' width='24' height=' 24' />\r\n      <rect className='right' color='currentColor' x='0' y='0' width='24' height=' 24' />\r\n    </MorphSvg>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { useDispatch } from 'react-redux'\r\nimport { useHistory } from 'react-router-dom'\r\nimport styled, { css } from 'styled-components'\r\nimport { RouteName } from '../../data/types'\r\nimport { ExpandIcon, CloseIcon } from '../../icons/FontAwesomeIcons'\r\nimport { setFullscreenPost } from '../../redux/actions'\r\nimport { dropShadow } from '../../styled/mixins'\r\n\r\nconst ExpandButton = styled(ExpandIcon)(\r\n  ({ theme }) => css`\r\n    grid-area: 1/1/2/2;\r\n    place-self: start start;\r\n    ${dropShadow}\r\n    margin: ${theme.dimensions.gutter};\r\n    cursor: pointer;\r\n  `\r\n)\r\n\r\nconst CloseButton = styled(CloseIcon)(\r\n  ({ theme }) => css`\r\n    grid-area: 1/1/2/2;\r\n    place-self: start start;\r\n    ${dropShadow}\r\n    margin: ${theme.dimensions.gutter};\r\n    cursor: pointer;\r\n  `\r\n)\r\n\r\ninterface ToggleFullscreenButtonProps {\r\n  index: number\r\n}\r\n\r\nexport default function ToggleFullscreenButton(props: ToggleFullscreenButtonProps) {\r\n  const { index } = props\r\n\r\n  const dispatch = useDispatch()\r\n  const history = useHistory()\r\n\r\n  const onFullscreenExit = React.useCallback<React.MouseEventHandler>(\r\n    (event) => {\r\n      event.stopPropagation()\r\n      history.goBack()\r\n    },\r\n    [history]\r\n  )\r\n\r\n  const onFullscreenEnter = React.useCallback<React.MouseEventHandler>(\r\n    (event) => {\r\n      event.stopPropagation()\r\n      dispatch(setFullscreenPost(index))\r\n      history.push(RouteName.STORIES)\r\n    },\r\n    [dispatch, history, index]\r\n  )\r\n\r\n  return history.location.pathname === RouteName.STORIES ? (\r\n    <CloseButton color='white' onClick={onFullscreenExit} aria-label='Exit fullscreen' title='Exit fullscreen' />\r\n  ) : (\r\n    <ExpandButton color='white' onClick={onFullscreenEnter} aria-label='Enter fullscreen' title='Enter fullscreen' />\r\n  )\r\n}\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { download } from '../../data/utils'\r\nimport { DownloadIcon, ExternalLinkIcon } from '../../icons/FontAwesomeIcons'\r\nimport { gutter, dropShadow } from '../../styled/mixins'\r\n\r\nconst Wrapper = styled.div`\r\n  grid-area: 3/1/4/2;\r\n  place-self: end stretch;\r\n  display: flex;\r\n  place-items: start center;\r\n  ${gutter}\r\n\r\n  > svg {\r\n    ${dropShadow}\r\n  }\r\n`\r\n\r\nconst DownloadButton = styled(DownloadIcon)`\r\n  cursor: pointer;\r\n`\r\n\r\ninterface LinkListProps {\r\n  fullSrc: string\r\n}\r\n\r\nexport default function LinkList(props: LinkListProps) {\r\n  const { fullSrc } = props\r\n\r\n  const handleDownload = React.useCallback<React.MouseEventHandler>(\r\n    (event) => {\r\n      event.stopPropagation()\r\n      download(fullSrc)\r\n    },\r\n    [fullSrc]\r\n  )\r\n\r\n  return (\r\n    <Wrapper>\r\n      <a href={fullSrc} target='_blank' rel='noopener noreferrer' aria-label='Open In New Tab' title={fullSrc}>\r\n        <ExternalLinkIcon color='white' title='Open image in new tab' />\r\n      </a>\r\n\r\n      <DownloadButton color='white' aria-label='Download Image' onClick={handleDownload} title={fullSrc} />\r\n    </Wrapper>\r\n  )\r\n}\r\n","import React, { useCallback, useState } from 'react'\r\nimport { useDispatch } from 'react-redux'\r\nimport { NO_OP } from '../../data/types'\r\nimport { setFullscreenPost } from '../../redux/actions'\r\nimport { Slider } from '../designsystem/Slider'\r\n\r\nconst duration = 5000\r\n\r\ninterface FullscreenProgressBarProps {\r\n  className?: string\r\n  index: number\r\n  isPaused?: boolean\r\n  onFinished?: () => void\r\n  isActive: boolean\r\n}\r\n\r\nexport default function FullscreenProgressBar(props: FullscreenProgressBarProps) {\r\n  const { onFinished = NO_OP, isActive } = props\r\n\r\n  const [mouseState, setMouseState] = useState(false)\r\n  const dispatch = useDispatch()\r\n  const setPost = useCallback((newIndex) => dispatch(setFullscreenPost(newIndex)), [dispatch])\r\n\r\n  React.useEffect(() => {\r\n    const listener = () => setMouseState(true)\r\n    document.addEventListener('mousedown', listener)\r\n    document.addEventListener('touchstart', listener)\r\n\r\n    return () => {\r\n      document.removeEventListener('mousedown', listener)\r\n      document.removeEventListener('touchstart', listener)\r\n    }\r\n  })\r\n\r\n  React.useEffect(() => {\r\n    const listener = () => setMouseState(false)\r\n    document.addEventListener('mouseup', listener)\r\n    document.addEventListener('touchend', listener)\r\n\r\n    return () => {\r\n      document.removeEventListener('mouseup', listener)\r\n      document.removeEventListener('touchend', listener)\r\n    }\r\n  })\r\n\r\n  const ref = React.useRef<HTMLInputElement>(null)\r\n\r\n  React.useEffect(() => {\r\n    if (!mouseState && isActive) {\r\n      console.log('triggered')\r\n      let handle: number\r\n      let then = new Date().getTime()\r\n\r\n      const renderFrame = () => {\r\n        if (ref.current) {\r\n          const now = new Date().getTime()\r\n          const newValue = Number(ref.current.value) + (now - then)\r\n          then = now\r\n\r\n          ref.current.value = newValue.toString()\r\n          const chromePercentage = Math.round((newValue / duration) * 100)\r\n          ref.current.style.backgroundImage = `linear-gradient(90deg, #ffffff80 ${chromePercentage}%, transparent ${chromePercentage}%)`\r\n\r\n          if (newValue >= Number(ref.current.max)) {\r\n            onFinished()\r\n            if (ref.current) {\r\n              ref.current.value = '0'\r\n            }\r\n          } else {\r\n            handle = requestAnimationFrame(renderFrame)\r\n          }\r\n        }\r\n      }\r\n\r\n      handle = requestAnimationFrame(renderFrame)\r\n\r\n      return () => {\r\n        console.log('removed interval')\r\n        cancelAnimationFrame(handle)\r\n      }\r\n    }\r\n  }, [isActive, mouseState, onFinished, props.index, setPost])\r\n\r\n  return (\r\n    <Slider\r\n      ref={ref}\r\n      type='range'\r\n      step={0.034}\r\n      min={0}\r\n      max={duration}\r\n      onChange={NO_OP}\r\n      onClick={NO_OP}\r\n      $controls={false}\r\n      $accent={false}\r\n      className={props.className}\r\n    />\r\n  )\r\n}\r\n","import styled, { css } from 'styled-components'\nimport { fadeOut } from '../../styled/animations'\nimport { formatDuration } from '../../misc/formatting'\nimport { ProgressBar } from './ProgressBar'\nimport { dropShadow } from '../../styled/mixins'\nimport { PlayPauseIcon } from '../../icons/PlayPauseIcon'\nimport ToggleFullscreenButton from './ToggleFullscreenButton'\nimport LinkList from './LinkList'\nimport React, { useCallback } from 'react'\nimport FullscreenProgressBar from './FullscreenProgressBar'\nimport { BackwardIcon, ForwardIcon } from '../../icons/FontAwesomeIcons'\n\nfunction overlayVisibility({ isVisible }: { isVisible: boolean }) {\n  return isVisible\n    ? css``\n    : css`\n        opacity: 0;\n        animation: ${fadeOut} 0.4s ease-in;\n      `\n}\n\nconst Wrapper = styled.div`\n  grid-area: 1/1/2/2;\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  grid-template-rows: auto 1fr auto auto;\n  z-index: 1;\n\n  ${overlayVisibility};\n`\n\nconst VideoProgressBar = styled(ProgressBar)(\n  ({ theme }) => css`\n    grid-area: 4/1/4/4;\n    margin: ${theme.dimensions.gutter};\n  `\n)\n\nconst AutoProgressBar = styled(FullscreenProgressBar)(\n  ({ theme }) => css`\n    grid-area: 4/1/4/4;\n    margin: ${theme.dimensions.gutter};\n  `\n)\n\nconst PlayButton = styled(PlayPauseIcon)`\n  height: 50px;\n  width: 50px;\n  grid-area: 2/2/3/3;\n  place-self: center center;\n  cursor: pointer;\n  fill: white;\n  ${dropShadow}\n`\n\nconst LengthDisplay = styled.span(\n  (props) => css`\n    grid-area: 3/3/4/4;\n    place-self: end end;\n    background: #00000080;\n    color: white;\n    border-radius: 4px;\n    padding: ${props.theme.dimensions.spacing};\n    margin: ${props.theme.dimensions.gutter};\n  `\n)\n\nconst ForwardArea = styled.div`\n  display: grid;\n  grid-area: 2/3/3/4;\n  place-items: center;\n  opacity: 0;\n`\n\nconst BackwardArea = styled.div`\n  display: grid;\n  grid-area: 2/1/3/2;\n  place-items: center;\n  opacity: 0;\n`\n\ntype ImageOverlayProps = {\n  type: 'image'\n  index: number\n  fullSrc: string\n  isFullscreen: boolean\n  onFinished?: () => void\n  isActive: boolean\n}\n\ntype GifOverlayProps = {\n  type: 'gif'\n  index: number\n  fullSrc: string\n  isPaused: boolean\n  onTogglePaused: React.MouseEventHandler\n  isFullscreen: boolean\n  onFinished?: () => void\n  isActive: boolean\n}\n\ntype VideoOverlayProps = {\n  type: 'video'\n  index: number\n  fullSrc: string\n  isPaused: boolean\n  duration: number\n  onTogglePaused: React.MouseEventHandler\n  onSeek: (value: number) => void\n  videoRef: HTMLVideoElement | null\n  isFullscreen: boolean\n  onFinished?: () => void\n  isActive: boolean\n}\n\ntype OverlayProps = (ImageOverlayProps | VideoOverlayProps | GifOverlayProps) & {\n  isVisible: boolean\n  setVisible: (value: boolean) => void\n}\n\nexport function ImageOverlay(props: Omit<ImageOverlayProps, 'type'>) {\n  const { index, fullSrc, isFullscreen, isActive, onFinished } = props\n\n  return (\n    <>\n      <ToggleFullscreenButton index={index} />\n      <LinkList fullSrc={fullSrc} />\n      {isFullscreen && <AutoProgressBar index={index} onFinished={onFinished} isActive={isActive} />}\n    </>\n  )\n}\n\nfunction GifOverlay(props: Omit<GifOverlayProps, 'type'>) {\n  const { fullSrc, isPaused, index, onTogglePaused, isFullscreen, isActive, onFinished } = props\n\n  return (\n    <>\n      <ToggleFullscreenButton index={index} />\n      <LinkList fullSrc={fullSrc} />\n      <PlayButton isPaused={isPaused} onClick={onTogglePaused} aria-label='Play/Pause' />\n      {isFullscreen && (\n        <AutoProgressBar index={index} isPaused={isPaused} onFinished={onFinished} isActive={isActive} />\n      )}\n      <LengthDisplay>GIF</LengthDisplay>\n    </>\n  )\n}\n\nfunction VideoOverlay(props: Omit<VideoOverlayProps, 'type'>) {\n  const { fullSrc, isPaused, index, onTogglePaused, onSeek, duration, videoRef, isActive, onFinished } = props\n\n  const handleSkipForward = useCallback(\n    (e) => {\n      e.preventDefault()\n      if (videoRef) {\n        onSeek(videoRef.currentTime + 10)\n      }\n    },\n    [onSeek, videoRef]\n  )\n\n  const handleSkipBackward = useCallback(\n    (e) => {\n      e.preventDefault()\n      if (videoRef) {\n        onSeek(videoRef.currentTime - 10)\n      }\n    },\n    [onSeek, videoRef]\n  )\n\n  return (\n    <>\n      <ToggleFullscreenButton index={index} />\n      <LinkList fullSrc={fullSrc} />\n      <BackwardArea onDoubleClick={handleSkipBackward}>\n        <BackwardIcon tabIndex={0} />\n      </BackwardArea>\n      <PlayButton isPaused={isPaused || !isActive} onClick={onTogglePaused} aria-label='Play/Pause' />\n      <ForwardArea onDoubleClick={handleSkipForward}>\n        <ForwardIcon tabIndex={0} />\n      </ForwardArea>\n      <LengthDisplay>{formatDuration(duration)}</LengthDisplay>\n      <VideoProgressBar isPaused={isPaused || !isActive} videoRef={videoRef} onChange={onSeek} onEnded={onFinished} />\n    </>\n  )\n}\n\nfunction getOverlayContent(props: OverlayProps) {\n  switch (props.type) {\n    case 'image':\n      return <ImageOverlay {...props} />\n    case 'gif':\n      return <GifOverlay {...props} />\n    case 'video':\n      return <VideoOverlay {...props} />\n  }\n}\n\nexport function Overlay(props: OverlayProps) {\n  const { isVisible, setVisible } = props\n\n  const toggleVisible = React.useCallback(() => setVisible(!isVisible), [isVisible, setVisible])\n\n  return (\n    <Wrapper isVisible={isVisible} onClick={toggleVisible} data-testid='overlay-wrapper'>\n      {getOverlayContent(props)}\n    </Wrapper>\n  )\n}\n","import React, { ChangeEventHandler, MouseEventHandler, useCallback } from 'react'\r\nimport { useTheme } from 'styled-components'\r\nimport { Slider } from '../designsystem/Slider'\r\n\r\ninterface ProgressBarProps {\r\n  isPaused: boolean\r\n  videoRef: HTMLVideoElement | null\r\n  onChange: (newValue: number) => void\r\n  className?: string\r\n  onEnded?: () => void\r\n}\r\n\r\nexport const ProgressBar = (props: ProgressBarProps) => {\r\n  const { isPaused, videoRef, className, onChange, onEnded } = props\r\n\r\n  const sliderRef = React.useRef<HTMLInputElement>(null)\r\n\r\n  const theme = useTheme()\r\n\r\n  const handleChange: ChangeEventHandler<HTMLInputElement> = useCallback(\r\n    (event) => {\r\n      const newValue = Number(event.target.value)\r\n      onChange(newValue)\r\n    },\r\n    [onChange]\r\n  )\r\n\r\n  const handleClick: MouseEventHandler = useCallback((event) => {\r\n    event.stopPropagation()\r\n  }, [])\r\n\r\n  React.useEffect(() => {\r\n    if (onEnded && videoRef) {\r\n      videoRef.addEventListener('ended', onEnded)\r\n\r\n      return () => videoRef.removeEventListener('ended', onEnded)\r\n    }\r\n  })\r\n\r\n  React.useEffect(() => {\r\n    if (!isPaused) {\r\n      let handle: number\r\n\r\n      const step = () => {\r\n        if (sliderRef?.current && videoRef) {\r\n          sliderRef.current.value = videoRef.currentTime.toString()\r\n          const chromePercentage = Math.round((videoRef.currentTime / videoRef.duration) * 100)\r\n          sliderRef.current.style.backgroundImage = `linear-gradient(90deg, ${theme.colors.accentColor} ${chromePercentage}%, transparent ${chromePercentage}%)`\r\n        }\r\n\r\n        handle = requestAnimationFrame(step)\r\n      }\r\n\r\n      handle = requestAnimationFrame(step)\r\n\r\n      return () => {\r\n        cancelAnimationFrame(handle)\r\n      }\r\n    }\r\n  }, [isPaused, theme.colors.accentColor, theme.colors.backgroundColor2, videoRef])\r\n\r\n  return (\r\n    <Slider\r\n      ref={sliderRef}\r\n      type='range'\r\n      step={0.034}\r\n      min={0}\r\n      max={videoRef?.duration || 0}\r\n      onChange={handleChange}\r\n      className={className}\r\n      onClick={handleClick}\r\n      $controls\r\n      $accent\r\n    />\r\n  )\r\n}\r\n","import styled from 'styled-components'\nimport { flexMedia, preserveAspectRatio } from '../../styled/mixins'\n\nconst FlexVideo = styled.video`\n  ${flexMedia}\n  ${preserveAspectRatio}\n  grid-area: 1/1/2/2;\n`\n\nexport default FlexVideo\n","import styled from 'styled-components'\r\nimport { mediaStyle } from '../../../styled/mixins'\r\nimport FlexImage from '../../designsystem/FlexImage'\r\nimport FlexVideo from '../../designsystem/FlexVideo'\r\n\r\nexport const PostVideo = styled(FlexVideo)`\r\n  ${mediaStyle}\r\n`\r\n\r\nexport const PostImage = styled(FlexImage)`\r\n  ${mediaStyle}\r\n`\r\n","import React from 'react'\r\nimport { NO_OP } from '../../../data/types'\r\nimport { Overlay } from '../Overlay'\r\nimport { PostImage } from './StyledMedia'\r\n\r\ninterface PictureProps {\r\n  viewSrc: string\r\n  fullSrc: string\r\n  onLoad?: () => void\r\n  width: number\r\n  height: number\r\n  index: number\r\n  isFullscreen: boolean\r\n  onFinished?: () => void\r\n  isActive: boolean\r\n}\r\n\r\nexport default function Picture(props: PictureProps) {\r\n  const { viewSrc, fullSrc, index, onLoad = NO_OP, width, height, isFullscreen, isActive, onFinished } = props\r\n\r\n  return (\r\n    <>\r\n      <PostImage\r\n        data-testid='image'\r\n        src={viewSrc}\r\n        alt={viewSrc}\r\n        onLoad={onLoad}\r\n        loading='lazy'\r\n        width={width}\r\n        height={height}\r\n      />\r\n      <Overlay\r\n        type='image'\r\n        fullSrc={fullSrc}\r\n        index={index}\r\n        isVisible={true}\r\n        setVisible={NO_OP}\r\n        isFullscreen={isFullscreen}\r\n        onFinished={onFinished}\r\n        isActive={isActive}\r\n      />\r\n    </>\r\n  )\r\n}\r\n","import React from 'react'\r\n\r\nlet isScrollingGlobal = false\r\nlet observers: React.Dispatch<React.SetStateAction<boolean>>[] = []\r\nlet listener: ((e: any) => void) | undefined\r\nlet timeoutId: NodeJS.Timeout | undefined\r\n\r\nexport const useIsScrolling = () => {\r\n  const [isScrolling, setIsScrolling] = React.useState(isScrollingGlobal)\r\n\r\n  if (listener === undefined) {\r\n    listener = (e) => {\r\n      isScrollingGlobal = true\r\n      observers.forEach((update) => update(isScrollingGlobal))\r\n\r\n      if (timeoutId) clearTimeout(timeoutId)\r\n\r\n      timeoutId = setTimeout(() => {\r\n        isScrollingGlobal = false\r\n        observers.forEach((update) => update(isScrollingGlobal))\r\n      }, 500)\r\n    }\r\n    document.addEventListener('scroll', listener, { passive: true })\r\n  }\r\n\r\n  React.useEffect(() => {\r\n    observers.push(setIsScrolling)\r\n    setIsScrolling(isScrollingGlobal)\r\n    return () => {\r\n      observers = observers.filter((update) => update !== setIsScrolling)\r\n\r\n      if (observers.length === 0 && listener) {\r\n        document.removeEventListener('scroll', listener)\r\n        listener = undefined\r\n      }\r\n    }\r\n  }, [])\r\n\r\n  // return global isOnline state and setter function\r\n  return isScrolling\r\n}\r\n","import React from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport { selectAutoPlay } from '../redux/selectors'\r\nimport useIsOnScreen from './useIsOnScreen'\r\nimport { useIsScrolling } from './useIsScrolling'\r\n\r\nexport function useAutoplay(ref: Element | null) {\r\n  const [playing, setPlaying] = React.useState(false)\r\n\r\n  const autoPlay = useSelector(selectAutoPlay)\r\n  const [isOnScreen] = useIsOnScreen(ref)\r\n  const isScrolling = useIsScrolling()\r\n\r\n  React.useEffect(() => {\r\n    if (autoPlay && isOnScreen && !isScrolling) {\r\n      setPlaying(true)\r\n    }\r\n  }, [autoPlay, isOnScreen, isScrolling])\r\n\r\n  React.useEffect(() => {\r\n    if (!isOnScreen) {\r\n      setPlaying(false)\r\n    }\r\n  }, [isOnScreen])\r\n\r\n  return autoPlay && playing\r\n}\r\n","import React, { useEffect, useState } from 'react'\nimport { NO_OP } from '../../../data/types'\nimport MediaProps from './MediaProps'\nimport { Overlay } from '../Overlay'\nimport { PostImage } from './StyledMedia'\nimport { useSelector } from 'react-redux'\nimport { selectPreloadGifs } from '../../../redux/selectors'\nimport { useAutoplay } from '../../../hooks/useAutoplay'\n\nexport default function Gif(props: MediaProps) {\n  const {\n    viewSrc,\n    thumbnailSrc,\n    fullSrc,\n    onLoad = NO_OP,\n    index,\n    width,\n    height,\n    detailsVisible,\n    isFullscreen,\n    onFinished,\n    isActive,\n  } = props\n\n  const [overlayVisible, setOverlayVisible] = React.useState(true)\n\n  // user play\n  const [userPlay, setUserPlay] = useState<boolean | null>(null)\n  const togglePlay: React.MouseEventHandler = React.useCallback(\n    (e) => {\n      e.stopPropagation()\n      setUserPlay(!userPlay)\n      setOverlayVisible(false)\n    },\n    [userPlay]\n  )\n\n  // auto play\n  const [gifRef, setGifRef] = useState<HTMLImageElement | null>(null)\n  const autoPlay = useAutoplay(gifRef)\n\n  const isPlaying = userPlay === null ? autoPlay : userPlay\n\n  // Preloading\n  const preload = useSelector(selectPreloadGifs)\n\n  const usedSource = isPlaying ? viewSrc : thumbnailSrc\n\n  useEffect(() => {\n    if (preload) {\n      const loader = new Image()\n      loader.src = viewSrc\n    }\n  })\n\n  return (\n    <>\n      <PostImage\n        data-testid='gif'\n        ref={setGifRef}\n        src={usedSource}\n        alt={usedSource}\n        loading='lazy'\n        onLoad={onLoad}\n        width={width}\n        height={height}\n      />\n\n      <Overlay\n        isVisible={!isPlaying || overlayVisible || detailsVisible}\n        setVisible={setOverlayVisible}\n        type='gif'\n        fullSrc={fullSrc}\n        index={index}\n        isPaused={!isPlaying}\n        onTogglePaused={togglePlay}\n        isFullscreen={isFullscreen}\n        onFinished={onFinished}\n        isActive={isActive}\n      />\n    </>\n  )\n}\n","import React, { useState } from 'react'\nimport { useSelector } from 'react-redux'\nimport { NO_OP } from '../../../data/types'\nimport { selectPreloadVideos } from '../../../redux/selectors'\nimport MediaProps from './MediaProps'\nimport { Overlay } from '../Overlay'\nimport { PostVideo } from './StyledMedia'\nimport { useAutoplay } from '../../../hooks/useAutoplay'\n\nexport default function Video(props: MediaProps) {\n  const {\n    viewSrc,\n    fullSrc,\n    onLoad = NO_OP,\n    index,\n    width,\n    height,\n    detailsVisible,\n    isFullscreen,\n    isActive,\n    onFinished,\n  } = props\n\n  const [overlayVisible, setOverlayVisible] = React.useState(true)\n\n  // user play\n  const [userPlay, setUserPlay] = useState<boolean | null>(null)\n  const togglePlay: React.MouseEventHandler = React.useCallback(\n    (e) => {\n      e.stopPropagation()\n      setUserPlay(!userPlay)\n      setOverlayVisible(false)\n    },\n    [userPlay]\n  )\n\n  // auto play\n  const [videoRef, setVideoRef] = useState<HTMLVideoElement | null>(null)\n  const autoPlay = useAutoplay(videoRef)\n\n  const isPlaying = userPlay === null ? autoPlay : userPlay\n\n  const preload = useSelector(selectPreloadVideos) ? 'auto' : 'metadata'\n\n  React.useEffect(() => {\n    if (isPlaying && videoRef?.paused) {\n      videoRef?.play()\n    }\n\n    if (!isPlaying && !videoRef?.paused) {\n      videoRef?.pause()\n    }\n  }, [viewSrc, isPlaying, videoRef])\n\n  const handleSeek = React.useCallback(\n    (value: number) => {\n      if (videoRef) {\n        videoRef.currentTime = value\n      }\n    },\n    [videoRef]\n  )\n\n  return (\n    <>\n      <PostVideo\n        data-testid='video'\n        controls={false}\n        loop={!isFullscreen}\n        preload={preload}\n        ref={setVideoRef}\n        onLoadedMetadata={onLoad}\n        width={width}\n        height={height}\n        src={viewSrc}\n      />\n      <Overlay\n        type='video'\n        index={index}\n        fullSrc={fullSrc}\n        isPaused={!isPlaying}\n        duration={videoRef?.duration || 0}\n        onTogglePaused={togglePlay}\n        onSeek={handleSeek}\n        videoRef={videoRef}\n        isVisible={!isPlaying || detailsVisible || overlayVisible}\n        setVisible={setOverlayVisible}\n        isFullscreen={isFullscreen}\n        onFinished={onFinished}\n        isActive={isActive}\n      />\n    </>\n  )\n}\n","import * as r34 from 'r34-types'\r\nimport React from 'react'\r\nimport Picture from './media/Picture'\r\nimport Gif from './media/Gif'\r\nimport Video from './media/Video'\r\nimport { useSources } from '../../hooks/useSources'\r\n\r\ntype MediaProps = {\r\n  type: r34.PostType\r\n  index: number\r\n  thumbnailSrc: string\r\n  sampleSrc: string\r\n  fullSrc: string\r\n  onLoad: () => void\r\n  width: number\r\n  height: number\r\n  detailsVisible: boolean\r\n  isFullscreen?: boolean\r\n  onFinished?: () => void\r\n  isActive?: boolean\r\n}\r\n\r\nexport function Media(props: MediaProps) {\r\n  const {\r\n    type,\r\n    thumbnailSrc,\r\n    sampleSrc,\r\n    fullSrc,\r\n    index,\r\n    onLoad,\r\n    width,\r\n    height,\r\n    detailsVisible,\r\n    isFullscreen = false,\r\n    onFinished,\r\n    isActive = false,\r\n  } = props\r\n  const [preview, src] = useSources(type, thumbnailSrc, sampleSrc, fullSrc)\r\n\r\n  switch (type) {\r\n    case 'image':\r\n      return (\r\n        <Picture\r\n          viewSrc={src}\r\n          fullSrc={fullSrc}\r\n          onLoad={onLoad}\r\n          index={index}\r\n          width={width}\r\n          height={height}\r\n          isFullscreen={isFullscreen}\r\n          onFinished={onFinished}\r\n          isActive={isActive}\r\n        />\r\n      )\r\n    case 'gif':\r\n      return (\r\n        <Gif\r\n          detailsVisible={detailsVisible}\r\n          viewSrc={src}\r\n          thumbnailSrc={preview}\r\n          fullSrc={fullSrc}\r\n          onLoad={onLoad}\r\n          index={index}\r\n          width={width}\r\n          height={height}\r\n          isFullscreen={isFullscreen}\r\n          onFinished={onFinished}\r\n          isActive={isActive}\r\n        />\r\n      )\r\n    case 'video':\r\n      return (\r\n        <Video\r\n          detailsVisible={detailsVisible}\r\n          viewSrc={src}\r\n          thumbnailSrc={preview}\r\n          fullSrc={fullSrc}\r\n          onLoad={onLoad}\r\n          index={index}\r\n          width={width}\r\n          height={height}\r\n          isFullscreen={isFullscreen}\r\n          onFinished={onFinished}\r\n          isActive={isActive}\r\n        />\r\n      )\r\n  }\r\n}\r\n","import React from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport { selectOriginals } from '../redux/selectors'\r\nimport * as r34 from 'r34-types'\r\n\r\nexport function useSources(type: r34.PostType, thumbnailSrc: string, sampleSrc: string, fullSrc: string) {\r\n  const loadOriginals = useSelector(selectOriginals)\r\n\r\n  return React.useMemo(() => {\r\n    switch (type) {\r\n      case 'image':\r\n        return loadOriginals ? ['', fullSrc] : ['', sampleSrc]\r\n      case 'gif':\r\n        return sampleSrc.includes('.gif') ? [thumbnailSrc, sampleSrc] : [sampleSrc, fullSrc]\r\n      case 'video':\r\n        return loadOriginals ? [thumbnailSrc, fullSrc] : [thumbnailSrc, sampleSrc]\r\n    }\r\n  }, [fullSrc, loadOriginals, sampleSrc, thumbnailSrc, type])\r\n}\r\n","import React from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport styled from 'styled-components'\r\nimport { NO_OP } from '../../../data/types'\r\nimport useIsOnScreen from '../../../hooks/useIsOnScreen'\r\nimport { selectPostByIndex } from '../../../redux/selectors'\r\nimport { Media } from '../../player/Media'\r\nconst Screen = styled.div`\r\n  height: 100vh;\r\n  width: 100vw;\r\n  scroll-snap-align: start;\r\n  scroll-snap-stop: always;\r\n\r\n  display: grid;\r\n`\r\n\r\ninterface StoryProps {\r\n  index: number\r\n  onInView?: (index: number) => void\r\n  onFinished?: () => void\r\n}\r\n\r\nexport default function Story(props: StoryProps) {\r\n  const { index, onInView, onFinished } = props\r\n  const [ref, setRef] = React.useState<HTMLElement | null>(null)\r\n  const [isInView] = useIsOnScreen(ref)\r\n  const { type, preview_url, sample_url, file_url, width, height } = useSelector(selectPostByIndex(index))\r\n\r\n  React.useEffect(() => {\r\n    if (onInView && isInView) {\r\n      onInView(index)\r\n    }\r\n  }, [index, isInView, onInView])\r\n\r\n  return (\r\n    <Screen id={`story-${index}`} ref={setRef}>\r\n      <Media\r\n        type={type}\r\n        index={index}\r\n        thumbnailSrc={preview_url}\r\n        sampleSrc={sample_url}\r\n        fullSrc={file_url}\r\n        onLoad={NO_OP}\r\n        width={width}\r\n        height={height}\r\n        detailsVisible={false}\r\n        isFullscreen={true}\r\n        onFinished={onFinished}\r\n        isActive={isInView}\r\n      />\r\n    </Screen>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { useHistory } from 'react-router-dom'\r\nimport styled, { css } from 'styled-components'\r\nimport { closeFullscreen, openFullscreen } from '../../data/browserUtils'\r\nimport useFullScreenCloseEffect from '../../hooks/useFullscreenCloseEffect'\r\nimport { setFullscreenPost } from '../../redux/actions'\r\nimport { selectFullsceenIndex } from '../../redux/selectors'\r\nimport Story from '../layout/stories/Story'\r\n\r\nconst StoriesWrapper = styled.div`\r\n  height: 100vh;\r\n  width: 100vw;\r\n  overflow: scroll;\r\n  scroll-snap-type: y mandatory;\r\n  scroll-snap-stop: always;\r\n\r\n  ::-webkit-scrollbar {\r\n    height: 0px;\r\n    width: 0px;\r\n  }\r\n`\r\n\r\ntype FillerProps = {\r\n  index: number\r\n}\r\n\r\nconst Filler = styled.div(\r\n  ({ index }: FillerProps) => css`\r\n    height: ${Math.max(index - 1, 0)}00vh;\r\n  `\r\n)\r\n\r\nexport default function Stories() {\r\n  const dispatch = useDispatch()\r\n  const history = useHistory()\r\n\r\n  const [ref, setRef] = React.useState<HTMLElement | null>(null)\r\n\r\n  const setIndex = React.useCallback((index: number) => dispatch(setFullscreenPost(index)), [dispatch])\r\n\r\n  const currentIdx = useSelector(selectFullsceenIndex)\r\n  const nextIdx = currentIdx + 1\r\n  const prevIdx = currentIdx - 1\r\n\r\n  const indexes = [prevIdx, currentIdx, nextIdx]\r\n\r\n  const scrollToNext = React.useCallback(() => {\r\n    document.getElementById(`story-${nextIdx}`)?.scrollIntoView({ behavior: 'smooth' })\r\n  }, [nextIdx])\r\n\r\n  useFullScreenCloseEffect(() => {\r\n    history.goBack()\r\n  })\r\n\r\n  React.useEffect(() => {\r\n    if (ref) {\r\n      openFullscreen(ref)\r\n    }\r\n  }, [ref])\r\n\r\n  return (\r\n    <StoriesWrapper ref={setRef}>\r\n      <Filler index={currentIdx} />\r\n      {indexes.map((index) => {\r\n        if (index < 0) return null\r\n        if (index < currentIdx) return <Story key={index} index={index} onInView={setIndex} />\r\n        if (index > currentIdx) return <Story key={index} index={index} onInView={setIndex} />\r\n        return <Story key={index} index={index} onFinished={scrollToNext} />\r\n      })}\r\n    </StoriesWrapper>\r\n  )\r\n}\r\n","import { useEffect } from 'react'\r\n\r\nexport default function useFullScreenCloseEffect(effect: () => void) {\r\n  useEffect(() => {\r\n    const handler = () => {\r\n      if (!document.fullscreenElement) {\r\n        effect()\r\n      }\r\n    }\r\n\r\n    document.addEventListener('fullscreenchange', handler)\r\n\r\n    return () => {\r\n      document.removeEventListener('fullscreenchange', handler)\r\n    }\r\n  }, [effect])\r\n}\r\n"],"sourceRoot":""}