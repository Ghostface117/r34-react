{"version":3,"sources":["hooks/useIsOnScreen.tsx","styled/animations.tsx","components/designsystem/Slider.tsx","icons/PlayPauseIcon.tsx","components/player/ToggleFullscreenButton.tsx","components/player/LinkList.tsx","components/player/Overlay.tsx","components/player/ProgressBar.tsx","components/player/FullscreenProgressBar.tsx","components/designsystem/FlexVideo.tsx","components/player/media/StyledMedia.ts","components/player/media/Picture.tsx","hooks/useIsScrolling.tsx","hooks/useAutoplay.tsx","components/player/media/Gif.tsx","components/player/media/Video.tsx","components/player/Media.tsx","hooks/useSources.tsx"],"names":["useIsOnScreen","target","options","useState","isOnScreen","setOnScreen","handleOnScreenChange","useCallback","entries","entry","isIntersecting","useEffect","observer","IntersectionObserver","threshold","root","observe","unobserve","fadeOut","keyframes","Slider","styled","input","$controls","$accent","theme","css","props","colors","layerBg","accentColor","backgroundColor2","trackStyle","commonStyle","thumbStyle","MorphSvg","svg","ToggleButton","InvisButton","dropShadow","dimensions","gutter","ToggleFullscreenButton","index","dispatch","useDispatch","history","useHistory","onFullscreenExit","React","event","stopPropagation","goBack","onFullscreenEnter","setFullscreenPost","push","RouteName","STORIES","location","pathname","onClick","title","color","Wrapper","div","flexRowWithGap","LinkButton","a","timings","transitionTime","DownloadButton","LinkList","fullSrc","handleDownload","download","href","rel","isVisible","VideoProgressBar","isPaused","videoRef","className","onChange","onEnded","sliderRef","useRef","useTheme","handleChange","newValue","Number","value","handleClick","addEventListener","removeEventListener","handle","requestAnimationFrame","step","current","currentTime","toString","chromePercentage","Math","round","duration","style","backgroundImage","cancelAnimationFrame","ref","type","min","max","AutoProgressBar","onFinished","NO_OP","isActive","mouseState","setMouseState","setPost","newIndex","useSelector","selectAutoscrollDelay","listener","document","then","Date","getTime","renderFrame","now","PlayButton","name","viewBox","xmlns","x","y","width","height","LengthDisplay","span","spacing","ForwardArea","BackwardArea","ImageOverlay","isFullscreen","GifOverlay","onTogglePaused","VideoOverlay","onSeek","handleSkipForward","e","preventDefault","handleSkipBackward","onDoubleClick","tabIndex","formatDuration","getOverlayContent","Overlay","setVisible","toggleVisible","FlexVideo","video","flexMedia","preserveAspectRatio","PostVideo","mediaStyle","PostImage","FlexImage","Picture","viewSrc","onLoad","src","alt","loading","timeoutId","isScrollingGlobal","observers","useAutoplay","playing","setPlaying","autoPlay","selectAutoPlay","isScrolling","setIsScrolling","undefined","forEach","update","clearTimeout","setTimeout","passive","filter","length","useIsScrolling","Gif","thumbnailSrc","detailsVisible","overlayVisible","setOverlayVisible","playState","setPlayState","gifRef","setGifRef","prefAutoplay","preload","selectPreloadGifs","usedSource","play","pause","togglePlay","Image","Video","setVideoRef","selectPreloadVideos","paused","message","includes","console","warn","error","err","handleSeek","controls","loop","onLoadedMetadata","Media","sampleSrc","loadOriginals","selectOriginals","useMemo","useSources","preview"],"mappings":"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","file":"static/js/0.bd9ddb6a.chunk.js","sourcesContent":["import { useCallback, useEffect, useState } from 'react'\n\nexport default function useIsOnScreen(target: Element | null, options?: IntersectionObserverInit) {\n  const [isOnScreen, setOnScreen] = useState(false)\n\n  const handleOnScreenChange = useCallback((entries: IntersectionObserverEntry[]) => {\n    const [entry] = entries\n    setOnScreen(entry.isIntersecting)\n  }, [])\n\n  useEffect(() => {\n    const observer = new IntersectionObserver(handleOnScreenChange, options || { threshold: 1, root: null })\n\n    if (target) {\n      observer.observe(target)\n    }\n\n    return () => {\n      if (target) {\n        observer.unobserve(target)\n      }\n    }\n  }, [handleOnScreenChange, options, target])\n\n  return [isOnScreen]\n}\n","import { keyframes } from 'styled-components'\n\nexport const fadeOut = keyframes`\n  from {\n    opacity: 1;\n  }\n\n  to {\n    opacity: 0;\n  }\n`\n","import styled, { DefaultTheme, css } from 'styled-components'\n\nfunction thumbStyle({ $controls, theme }: { $controls: boolean; theme: DefaultTheme }) {\n  const commonStyle = css`\n    height: 16px;\n    width: 16px;\n    border-radius: 100px;\n    background: ${$controls ? theme.colors.backgroundColor2 : 'transparent'};\n    cursor: pointer;\n  `\n\n  return css`\n    &::-webkit-slider-thumb {\n      -webkit-appearance: none;\n      ${commonStyle}\n    }\n\n    &::-moz-range-thumb {\n      ${commonStyle}\n    }\n\n    &::-ms-thumb {\n      ${commonStyle}\n    }\n  `\n}\n\nfunction trackStyle({ $accent, theme }: { $accent: boolean; theme: DefaultTheme }) {\n  return css`\n    -webkit-appearance: none;\n    flex-grow: 1;\n    background: ${(props) => props.theme.colors.layerBg};\n    border-radius: 100px;\n    height: 6px;\n\n    &::-moz-range-progress {\n      background-color: ${$accent ? theme.colors.accentColor : theme.colors.backgroundColor2};\n    }\n\n    &::-ms-fill-lower {\n      background-color: ${$accent ? theme.colors.accentColor : theme.colors.backgroundColor2};\n    }\n  `\n}\n\nexport const Slider = styled.input(\n  ({ $controls, $accent, theme }: { $controls: boolean; $accent: boolean; theme: DefaultTheme }) => css`\n    ${trackStyle({ $accent, theme })}\n    ${thumbStyle({ $controls, theme })}\n  `\n)\n","import React, { MouseEventHandler } from 'react'\nimport styled from 'styled-components'\n\ninterface PlayPauseIconProps {\n  className?: string\n  isPaused: boolean\n  onClick: MouseEventHandler<SVGElement>\n}\n\nconst MorphSvg = styled.svg`\n  > rect {\n    transition: all 0.2s ease-in;\n  }\n\n  &.play {\n    .left {\n      clip-path: path('M1.61 0 L10.1 4.9 L10.1 19.1 L1.61 24');\n    }\n\n    .right {\n      clip-path: path('M22.39 12 L9.9 4.79 L9.9 19.21 L22.39 12');\n    }\n  }\n\n  &.pause {\n    .left {\n      clip-path: path('M4.8 0 L10 0 L10 24 L4.8 24');\n    }\n\n    .right {\n      clip-path: path('M19.2 0 L14 0 L14 24 L19.2 24');\n    }\n  }\n`\n\n/**\n * A button that fluidly transforms between a Play and a Pause icon based on isPaused.\n * Use onClick to update isPaused.\n * Additionally, this component takes a classname\n */\nexport function PlayPauseIcon(props: PlayPauseIconProps) {\n  const { onClick, className = '', isPaused } = props\n\n  return (\n    <MorphSvg\n      name='Play/Pause'\n      viewBox='0 0 24 24'\n      xmlns='http://www.w3.org/2000/svg'\n      onClick={onClick}\n      className={`${className} ${isPaused ? 'play' : 'pause'}`}\n    >\n      <rect className='left' color='currentColor' x='0' y='0' width='24' height=' 24' />\n      <rect className='right' color='currentColor' x='0' y='0' width='24' height=' 24' />\n    </MorphSvg>\n  )\n}\n","import React from 'react'\nimport { useDispatch } from 'react-redux'\nimport { useHistory } from 'react-router-dom'\nimport styled, { css } from 'styled-components'\nimport { RouteName } from '../../data/types'\nimport { ExpandIcon, CloseIcon } from '../../icons/FontAwesomeIcons'\nimport { setFullscreenPost } from '../../redux/actions'\nimport { dropShadow } from '../../styled/mixins'\nimport { InvisButton } from '../designsystem/Buttons'\n\nconst ToggleButton = styled(InvisButton)(\n  ({ theme }) => css`\n    grid-area: 1/1/2/2;\n    place-self: start start;\n    ${dropShadow}\n    padding: ${theme.dimensions.gutter};\n    cursor: pointer;\n  `\n)\n\ninterface ToggleFullscreenButtonProps {\n  index: number\n}\n\nexport default function ToggleFullscreenButton(props: ToggleFullscreenButtonProps) {\n  const { index } = props\n\n  const dispatch = useDispatch()\n  const history = useHistory()\n\n  const onFullscreenExit = React.useCallback<React.MouseEventHandler>(\n    (event) => {\n      event.stopPropagation()\n      history.goBack()\n    },\n    [history]\n  )\n\n  const onFullscreenEnter = React.useCallback<React.MouseEventHandler>(\n    (event) => {\n      event.stopPropagation()\n      dispatch(setFullscreenPost(index))\n      history.push(RouteName.STORIES)\n    },\n    [dispatch, history, index]\n  )\n\n  return history.location.pathname === RouteName.STORIES ? (\n    <ToggleButton onClick={onFullscreenExit} aria-label='Exit fullscreen' title='Exit fullscreen'>\n      <CloseIcon color='white' />\n    </ToggleButton>\n  ) : (\n    <ToggleButton onClick={onFullscreenEnter} aria-label='Enter fullscreen' title='Enter fullscreen'>\n      <ExpandIcon color='white' />\n    </ToggleButton>\n  )\n}\n","import React from 'react'\nimport styled, { css } from 'styled-components'\nimport { download } from '../../data/utils'\nimport { DownloadIcon, ExternalLinkIcon } from '../../icons/FontAwesomeIcons'\nimport { dropShadow, flexRowWithGap } from '../../styled/mixins'\nimport { InvisButton } from '../designsystem/Buttons'\n\nconst Wrapper = styled.div(\n  ({ theme }) => css`\n    grid-area: 3/1/4/2;\n    ${flexRowWithGap}\n    place-self: end start;\n    place-items: start center;\n  `\n)\n\nconst LinkButton = styled.a(\n  ({ theme }) => css`\n    padding: ${theme.dimensions.gutter};\n    cursor: pointer;\n    ${dropShadow({ theme })}\n\n    svg {\n      transition: all ${theme.timings.transitionTime} ease-out;\n    }\n  `\n)\n\nconst DownloadButton = styled(InvisButton)`\n  cursor: pointer;\n`\n\ninterface LinkListProps {\n  fullSrc: string\n}\n\nexport default function LinkList(props: LinkListProps) {\n  const { fullSrc } = props\n\n  const handleDownload = React.useCallback<React.MouseEventHandler>(\n    (event) => {\n      event.stopPropagation()\n      download(fullSrc)\n    },\n    [fullSrc]\n  )\n\n  return (\n    <Wrapper>\n      <LinkButton href={fullSrc} target='_blank' rel='noopener noreferrer' aria-label='Open In New Tab' title={fullSrc}>\n        <ExternalLinkIcon color='white' title='Open image in new tab' />\n      </LinkButton>\n\n      <DownloadButton aria-label='Download Image' onClick={handleDownload} title={fullSrc}>\n        <DownloadIcon color='white' />\n      </DownloadButton>\n    </Wrapper>\n  )\n}\n","import styled, { css } from 'styled-components'\nimport { fadeOut } from '../../styled/animations'\nimport { formatDuration } from '../../misc/formatting'\nimport { ProgressBar } from './ProgressBar'\nimport { dropShadow } from '../../styled/mixins'\nimport { PlayPauseIcon } from '../../icons/PlayPauseIcon'\nimport ToggleFullscreenButton from './ToggleFullscreenButton'\nimport LinkList from './LinkList'\nimport React, { useCallback } from 'react'\nimport FullscreenProgressBar from './FullscreenProgressBar'\nimport { BackwardIcon, ForwardIcon } from '../../icons/FontAwesomeIcons'\n\nfunction overlayVisibility({ isVisible }: { isVisible: boolean }) {\n  return isVisible\n    ? css``\n    : css`\n        opacity: 0;\n        animation: ${fadeOut} 0.4s ease-in;\n      `\n}\n\nconst Wrapper = styled.div`\n  grid-area: 1/1/2/2;\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  grid-template-rows: auto 1fr auto auto;\n  z-index: 1;\n\n  ${overlayVisibility};\n`\n\nconst VideoProgressBar = styled(ProgressBar)(\n  ({ theme }) => css`\n    grid-area: 4/1/4/4;\n    margin: ${theme.dimensions.gutter};\n  `\n)\n\nconst AutoProgressBar = styled(FullscreenProgressBar)(\n  ({ theme }) => css`\n    grid-area: 4/1/4/4;\n    margin: ${theme.dimensions.gutter};\n  `\n)\n\nconst PlayButton = styled(PlayPauseIcon)`\n  height: 50px;\n  width: 50px;\n  grid-area: 2/2/3/3;\n  place-self: center center;\n  cursor: pointer;\n  fill: white;\n  ${dropShadow}\n`\n\nconst LengthDisplay = styled.span(\n  (props) => css`\n    grid-area: 3/3/4/4;\n    place-self: end end;\n    background: #00000080;\n    color: white;\n    border-radius: 4px;\n    padding: ${props.theme.dimensions.spacing};\n    margin: ${props.theme.dimensions.gutter};\n  `\n)\n\nconst ForwardArea = styled.div`\n  display: grid;\n  grid-area: 2/3/3/4;\n  place-items: center;\n  opacity: 0;\n`\n\nconst BackwardArea = styled.div`\n  display: grid;\n  grid-area: 2/1/3/2;\n  place-items: center;\n  opacity: 0;\n`\n\ntype ImageOverlayProps = {\n  type: 'image'\n  index: number\n  fullSrc: string\n  isFullscreen: boolean\n  onFinished?: () => void\n  isActive: boolean\n}\n\ntype GifOverlayProps = {\n  type: 'gif'\n  index: number\n  fullSrc: string\n  isPaused: boolean\n  onTogglePaused: React.MouseEventHandler\n  isFullscreen: boolean\n  onFinished?: () => void\n  isActive: boolean\n}\n\ntype VideoOverlayProps = {\n  type: 'video'\n  index: number\n  fullSrc: string\n  isPaused: boolean\n  duration: number\n  onTogglePaused: React.MouseEventHandler\n  onSeek: (value: number) => void\n  videoRef: HTMLVideoElement | null\n  isFullscreen: boolean\n  onFinished?: () => void\n  isActive: boolean\n}\n\ntype OverlayProps = (ImageOverlayProps | VideoOverlayProps | GifOverlayProps) & {\n  isVisible: boolean\n  setVisible: (value: boolean) => void\n}\n\nexport function ImageOverlay(props: Omit<ImageOverlayProps, 'type'>) {\n  const { index, fullSrc, isFullscreen, isActive, onFinished } = props\n\n  return (\n    <>\n      <ToggleFullscreenButton index={index} />\n      <LinkList fullSrc={fullSrc} />\n      {isFullscreen && <AutoProgressBar index={index} onFinished={onFinished} isActive={isActive} />}\n    </>\n  )\n}\n\nfunction GifOverlay(props: Omit<GifOverlayProps, 'type'>) {\n  const { fullSrc, isPaused, index, onTogglePaused, isFullscreen, isActive, onFinished } = props\n\n  return (\n    <>\n      <ToggleFullscreenButton index={index} />\n      <LinkList fullSrc={fullSrc} />\n      <PlayButton isPaused={isPaused} onClick={onTogglePaused} aria-label='Play/Pause' />\n      {isFullscreen && (\n        <AutoProgressBar index={index} isPaused={isPaused} onFinished={onFinished} isActive={isActive} />\n      )}\n      <LengthDisplay>GIF</LengthDisplay>\n    </>\n  )\n}\n\nfunction VideoOverlay(props: Omit<VideoOverlayProps, 'type'>) {\n  const { fullSrc, isPaused, index, onTogglePaused, onSeek, duration, videoRef, isActive, onFinished } = props\n\n  const handleSkipForward = useCallback(\n    (e) => {\n      e.preventDefault()\n      if (videoRef) {\n        onSeek(videoRef.currentTime + 10)\n      }\n    },\n    [onSeek, videoRef]\n  )\n\n  const handleSkipBackward = useCallback(\n    (e) => {\n      e.preventDefault()\n      if (videoRef) {\n        onSeek(videoRef.currentTime - 10)\n      }\n    },\n    [onSeek, videoRef]\n  )\n\n  return (\n    <>\n      <ToggleFullscreenButton index={index} />\n      <LinkList fullSrc={fullSrc} />\n      <BackwardArea onDoubleClick={handleSkipBackward}>\n        <BackwardIcon tabIndex={0} />\n      </BackwardArea>\n      <PlayButton isPaused={isPaused || !isActive} onClick={onTogglePaused} aria-label='Play/Pause' />\n      <ForwardArea onDoubleClick={handleSkipForward}>\n        <ForwardIcon tabIndex={0} />\n      </ForwardArea>\n      <LengthDisplay>{formatDuration(duration)}</LengthDisplay>\n      <VideoProgressBar isPaused={isPaused || !isActive} videoRef={videoRef} onChange={onSeek} onEnded={onFinished} />\n    </>\n  )\n}\n\nfunction getOverlayContent(props: OverlayProps) {\n  switch (props.type) {\n    case 'image':\n      return <ImageOverlay {...props} />\n    case 'gif':\n      return <GifOverlay {...props} />\n    case 'video':\n      return <VideoOverlay {...props} />\n  }\n}\n\nexport function Overlay(props: OverlayProps) {\n  const { isVisible, setVisible } = props\n\n  const toggleVisible = React.useCallback(() => setVisible(!isVisible), [isVisible, setVisible])\n\n  return (\n    <Wrapper isVisible={isVisible} onClick={toggleVisible} data-testid='overlay-wrapper' data-name='overlay'>\n      {getOverlayContent(props)}\n    </Wrapper>\n  )\n}\n","import React, { ChangeEventHandler, MouseEventHandler, useCallback } from 'react'\nimport { useTheme } from 'styled-components'\nimport { Slider } from '../designsystem/Slider'\n\ninterface ProgressBarProps {\n  isPaused: boolean\n  videoRef: HTMLVideoElement | null\n  onChange: (newValue: number) => void\n  className?: string\n  onEnded?: () => void\n}\n\nexport const ProgressBar = (props: ProgressBarProps) => {\n  const { isPaused, videoRef, className, onChange, onEnded } = props\n\n  const sliderRef = React.useRef<HTMLInputElement>(null)\n\n  const theme = useTheme()\n\n  const handleChange: ChangeEventHandler<HTMLInputElement> = useCallback(\n    (event) => {\n      const newValue = Number(event.target.value)\n      onChange(newValue)\n    },\n    [onChange]\n  )\n\n  const handleClick: MouseEventHandler = useCallback((event) => {\n    event.stopPropagation()\n  }, [])\n\n  React.useEffect(() => {\n    if (onEnded && videoRef) {\n      videoRef.addEventListener('ended', onEnded)\n\n      return () => videoRef.removeEventListener('ended', onEnded)\n    }\n  })\n\n  React.useEffect(() => {\n    if (!isPaused) {\n      let handle: number\n\n      const step = () => {\n        if (sliderRef?.current && videoRef) {\n          sliderRef.current.value = videoRef.currentTime.toString()\n          const chromePercentage = Math.round((videoRef.currentTime / videoRef.duration) * 100)\n          sliderRef.current.style.backgroundImage = `linear-gradient(90deg, ${theme.colors.accentColor} ${chromePercentage}%, transparent ${chromePercentage}%)`\n        }\n\n        handle = requestAnimationFrame(step)\n      }\n\n      handle = requestAnimationFrame(step)\n\n      return () => {\n        cancelAnimationFrame(handle)\n      }\n    }\n  }, [isPaused, theme.colors.accentColor, theme.colors.backgroundColor2, videoRef])\n\n  return (\n    <Slider\n      ref={sliderRef}\n      type='range'\n      step={0.034}\n      min={0}\n      max={videoRef?.duration || 0}\n      onChange={handleChange}\n      className={className}\n      onClick={handleClick}\n      $controls\n      $accent\n    />\n  )\n}\n","import React from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { NO_OP } from '../../data/types'\nimport { setFullscreenPost } from '../../redux/actions'\nimport { selectAutoscrollDelay } from '../../redux/selectors'\nimport { Slider } from '../designsystem/Slider'\n\ninterface FullscreenProgressBarProps {\n  className?: string\n  index: number\n  isPaused?: boolean\n  onFinished?: () => void\n  isActive: boolean\n}\n\nexport default function FullscreenProgressBar(props: FullscreenProgressBarProps) {\n  const { onFinished = NO_OP, isActive } = props\n\n  const dispatch = useDispatch()\n  const [mouseState, setMouseState] = React.useState(false)\n  const setPost = React.useCallback((newIndex) => dispatch(setFullscreenPost(newIndex)), [dispatch])\n  const duration = 1000 * useSelector(selectAutoscrollDelay)\n  const ref = React.useRef<HTMLInputElement>(null)\n\n  React.useEffect(() => {\n    const listener = () => setMouseState(true)\n    document.addEventListener('mousedown', listener)\n    document.addEventListener('touchstart', listener)\n\n    return () => {\n      document.removeEventListener('mousedown', listener)\n      document.removeEventListener('touchstart', listener)\n    }\n  })\n\n  React.useEffect(() => {\n    const listener = () => setMouseState(false)\n    document.addEventListener('mouseup', listener)\n    document.addEventListener('touchend', listener)\n\n    return () => {\n      document.removeEventListener('mouseup', listener)\n      document.removeEventListener('touchend', listener)\n    }\n  })\n\n  React.useEffect(() => {\n    if (!mouseState && isActive) {\n      let handle: number\n      let then = new Date().getTime()\n\n      const renderFrame = () => {\n        if (ref.current) {\n          const now = new Date().getTime()\n          const newValue = Number(ref.current.value) + (now - then)\n          then = now\n\n          ref.current.value = newValue.toString()\n          const chromePercentage = Math.round((newValue / duration) * 100)\n          ref.current.style.backgroundImage = `linear-gradient(90deg, #ffffff80 ${chromePercentage}%, transparent ${chromePercentage}%)`\n\n          if (newValue >= Number(ref.current.max)) {\n            onFinished()\n            if (ref.current) {\n              ref.current.value = '0'\n            }\n          } else {\n            handle = requestAnimationFrame(renderFrame)\n          }\n        }\n      }\n\n      handle = requestAnimationFrame(renderFrame)\n\n      return () => {\n        cancelAnimationFrame(handle)\n      }\n    }\n  }, [duration, isActive, mouseState, onFinished, props.index, setPost])\n\n  return (\n    <Slider\n      ref={ref}\n      type='range'\n      step={0.034}\n      min={0}\n      max={duration}\n      onChange={NO_OP}\n      onClick={NO_OP}\n      $controls={false}\n      $accent={false}\n      className={props.className}\n    />\n  )\n}\n","import styled from 'styled-components'\nimport { flexMedia, preserveAspectRatio } from '../../styled/mixins'\n\nconst FlexVideo = styled.video`\n  ${flexMedia}\n  ${preserveAspectRatio}\n  grid-area: 1/1/2/2;\n`\n\nexport default FlexVideo\n","import styled from 'styled-components'\nimport { mediaStyle } from '../../../styled/mixins'\nimport FlexImage from '../../designsystem/FlexImage'\nimport FlexVideo from '../../designsystem/FlexVideo'\n\nexport const PostVideo = styled(FlexVideo)`\n  ${mediaStyle}\n`\n\nexport const PostImage = styled(FlexImage)`\n  ${mediaStyle}\n`\n","import React from 'react'\nimport { NO_OP } from '../../../data/types'\nimport { Overlay } from '../Overlay'\nimport { PostImage } from './StyledMedia'\n\ninterface PictureProps {\n  viewSrc: string\n  fullSrc: string\n  onLoad?: () => void\n  width: number\n  height: number\n  index: number\n  isFullscreen: boolean\n  onFinished?: () => void\n  isActive: boolean\n}\n\nexport default function Picture(props: PictureProps) {\n  const { viewSrc, fullSrc, index, onLoad = NO_OP, width, height, isFullscreen, isActive, onFinished } = props\n\n  return (\n    <>\n      <PostImage\n        data-testid='image'\n        src={viewSrc}\n        alt={viewSrc}\n        onLoad={onLoad}\n        loading='lazy'\n        width={width}\n        height={height}\n      />\n      <Overlay\n        type='image'\n        fullSrc={fullSrc}\n        index={index}\n        isVisible={true}\n        setVisible={NO_OP}\n        isFullscreen={isFullscreen}\n        onFinished={onFinished}\n        isActive={isActive}\n      />\n    </>\n  )\n}\n","import React from 'react'\n\nlet isScrollingGlobal = false\nlet observers: React.Dispatch<React.SetStateAction<boolean>>[] = []\nlet listener: ((e: any) => void) | undefined\nlet timeoutId: NodeJS.Timeout | undefined\n\nexport const useIsScrolling = () => {\n  const [isScrolling, setIsScrolling] = React.useState(isScrollingGlobal)\n\n  if (listener === undefined) {\n    listener = (e) => {\n      isScrollingGlobal = true\n      observers.forEach((update) => update(isScrollingGlobal))\n\n      if (timeoutId) clearTimeout(timeoutId)\n\n      timeoutId = setTimeout(() => {\n        isScrollingGlobal = false\n        observers.forEach((update) => update(isScrollingGlobal))\n      }, 500)\n    }\n    document.addEventListener('scroll', listener, { passive: true })\n  }\n\n  React.useEffect(() => {\n    observers.push(setIsScrolling)\n    setIsScrolling(isScrollingGlobal)\n    return () => {\n      observers = observers.filter((update) => update !== setIsScrolling)\n\n      if (observers.length === 0 && listener) {\n        document.removeEventListener('scroll', listener)\n        listener = undefined\n      }\n    }\n  }, [])\n\n  // return global isOnline state and setter function\n  return isScrolling\n}\n","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { selectAutoPlay } from '../redux/selectors'\nimport useIsOnScreen from './useIsOnScreen'\nimport { useIsScrolling } from './useIsScrolling'\n\nexport function useAutoplay(ref: Element | null) {\n  const [playing, setPlaying] = React.useState(false)\n\n  const autoPlay = useSelector(selectAutoPlay)\n  const [isOnScreen] = useIsOnScreen(ref)\n  const isScrolling = useIsScrolling()\n\n  React.useEffect(() => {\n    if (autoPlay && isOnScreen && !isScrolling) {\n      setPlaying(true)\n    }\n  }, [autoPlay, isOnScreen, isScrolling])\n\n  React.useEffect(() => {\n    if (!isOnScreen) {\n      setPlaying(false)\n    }\n  }, [isOnScreen])\n\n  return playing\n}\n","import React, { useEffect, useState } from 'react'\nimport { NO_OP } from '../../../data/types'\nimport MediaProps from './MediaProps'\nimport { Overlay } from '../Overlay'\nimport { PostImage } from './StyledMedia'\nimport { useSelector } from 'react-redux'\nimport { selectAutoPlay, selectPreloadGifs } from '../../../redux/selectors'\nimport { useAutoplay } from '../../../hooks/useAutoplay'\n\nexport default function Gif(props: MediaProps) {\n  const {\n    viewSrc,\n    thumbnailSrc,\n    fullSrc,\n    onLoad = NO_OP,\n    index,\n    width,\n    height,\n    detailsVisible,\n    isFullscreen,\n    onFinished,\n    isActive,\n  } = props\n\n  const [overlayVisible, setOverlayVisible] = React.useState(true)\n\n  // user play\n  const [playState, setPlayState] = useState(false)\n\n  // auto play\n  const [gifRef, setGifRef] = useState<HTMLImageElement | null>(null)\n  const prefAutoplay = useSelector(selectAutoPlay)\n  const autoPlay = useAutoplay(gifRef)\n  // Preloading\n  const preload = useSelector(selectPreloadGifs)\n\n  const usedSource = playState ? viewSrc : thumbnailSrc\n\n  const play = React.useCallback(async () => {\n    setPlayState(true)\n  }, [])\n\n  const pause = React.useCallback(() => {\n    setPlayState(false)\n  }, [])\n\n  const togglePlay: React.MouseEventHandler = React.useCallback(\n    (e) => {\n      e.stopPropagation()\n      if (playState) {\n        setPlayState(false)\n      } else {\n        setPlayState(true)\n        setOverlayVisible(false)\n      }\n    },\n    [playState]\n  )\n\n  React.useEffect(() => {\n    if (prefAutoplay) {\n      if (autoPlay) {\n        setPlayState(true)\n      }\n    }\n\n    if (!autoPlay) {\n      setPlayState(false)\n    }\n  }, [autoPlay, pause, play, prefAutoplay])\n\n  useEffect(() => {\n    if (preload) {\n      const loader = new Image()\n      loader.src = viewSrc\n    }\n  })\n\n  return (\n    <>\n      <PostImage\n        data-testid='gif'\n        ref={setGifRef}\n        src={usedSource}\n        alt={usedSource}\n        loading='lazy'\n        onLoad={onLoad}\n        width={width}\n        height={height}\n      />\n\n      <Overlay\n        isVisible={!playState || overlayVisible || detailsVisible}\n        setVisible={setOverlayVisible}\n        type='gif'\n        fullSrc={fullSrc}\n        index={index}\n        isPaused={!playState}\n        onTogglePaused={togglePlay}\n        isFullscreen={isFullscreen}\n        onFinished={onFinished}\n        isActive={isActive}\n      />\n    </>\n  )\n}\n","import React, { useState } from 'react'\nimport { useSelector } from 'react-redux'\nimport { NO_OP } from '../../../data/types'\nimport { selectAutoPlay, selectPreloadVideos } from '../../../redux/selectors'\nimport MediaProps from './MediaProps'\nimport { Overlay } from '../Overlay'\nimport { PostVideo } from './StyledMedia'\nimport { useAutoplay } from '../../../hooks/useAutoplay'\n\nexport default function Video(props: MediaProps) {\n  const {\n    viewSrc,\n    fullSrc,\n    onLoad = NO_OP,\n    index,\n    width,\n    height,\n    detailsVisible,\n    isFullscreen,\n    isActive,\n    onFinished,\n  } = props\n\n  const [playState, setPlayState] = useState(false)\n\n  const [overlayVisible, setOverlayVisible] = React.useState(true)\n  const [videoRef, setVideoRef] = useState<HTMLVideoElement | null>(null)\n\n  const autoPlay = useAutoplay(videoRef)\n\n  const preload = useSelector(selectPreloadVideos) ? 'auto' : 'metadata'\n  const prefAutoplay = useSelector(selectAutoPlay)\n\n  const play = React.useCallback(async () => {\n    if (videoRef?.paused) {\n      try {\n        await videoRef.play()\n        setPlayState(true)\n      } catch (err) {\n        if ((err as DOMException).message.includes(\"user didn't interact with the document first\")) {\n          // Modern browsers prevent playing of videos before the use has interacted with the page in some form\n          console.warn('Autoplay failed because the user did not interact with the page first:', err)\n        } else if ((err as DOMException).message.includes('play() request was interrupted by a call to pause()')) {\n          // This happens when you scrollfast with autoplay enabled.\n          // The videos attempt to play but before they actually start you already scroll on\n          // and they get paused as they move offscreen.\n          console.warn('Play was interrupted by pause', err)\n        } else {\n          console.error('Failed to start video:', err)\n        }\n      }\n    }\n  }, [videoRef])\n\n  const pause = React.useCallback(() => {\n    if (!videoRef?.paused) {\n      try {\n        videoRef?.pause()\n        setPlayState(false)\n      } catch (err) {\n        console.error('Failed to start video:', err)\n      }\n    }\n  }, [videoRef])\n\n  const handleSeek = React.useCallback(\n    (value: number) => {\n      if (videoRef) {\n        videoRef.currentTime = value\n      }\n    },\n    [videoRef]\n  )\n\n  // user play\n  const togglePlay: React.MouseEventHandler = React.useCallback(\n    (e) => {\n      e.stopPropagation()\n      if (videoRef) {\n        if (videoRef.paused) {\n          play()\n          setOverlayVisible(false)\n        } else {\n          pause()\n        }\n      }\n    },\n    [pause, play, videoRef]\n  )\n\n  React.useEffect(() => {\n    if (prefAutoplay) {\n      if (autoPlay) {\n        play()\n      }\n    }\n\n    if (!autoPlay) {\n      pause()\n    }\n  }, [autoPlay, pause, play, prefAutoplay])\n\n  return (\n    <>\n      <PostVideo\n        data-testid='video'\n        controls={false}\n        loop={!isFullscreen}\n        preload={preload}\n        ref={setVideoRef}\n        onLoadedMetadata={onLoad}\n        width={width}\n        height={height}\n        src={viewSrc}\n      />\n      <Overlay\n        type='video'\n        index={index}\n        fullSrc={fullSrc}\n        isPaused={!playState}\n        duration={videoRef?.duration || 0}\n        onTogglePaused={togglePlay}\n        onSeek={handleSeek}\n        videoRef={videoRef}\n        isVisible={!playState || detailsVisible || overlayVisible}\n        setVisible={setOverlayVisible}\n        isFullscreen={isFullscreen}\n        onFinished={onFinished}\n        isActive={isActive}\n      />\n    </>\n  )\n}\n","import * as r34 from 'r34-types'\nimport React from 'react'\nimport Picture from './media/Picture'\nimport Gif from './media/Gif'\nimport Video from './media/Video'\nimport { useSources } from '../../hooks/useSources'\n\ntype MediaProps = {\n  type: r34.PostType\n  index: number\n  thumbnailSrc: string\n  sampleSrc: string\n  fullSrc: string\n  onLoad: () => void\n  width: number\n  height: number\n  detailsVisible: boolean\n  isFullscreen?: boolean\n  onFinished?: () => void\n  isActive?: boolean\n}\n\nexport function Media(props: MediaProps) {\n  const {\n    type,\n    thumbnailSrc,\n    sampleSrc,\n    fullSrc,\n    index,\n    onLoad,\n    width,\n    height,\n    detailsVisible,\n    isFullscreen = false,\n    onFinished,\n    isActive = false,\n  } = props\n  const [preview, src] = useSources(type, thumbnailSrc, sampleSrc, fullSrc)\n\n  switch (type) {\n    case 'image':\n      return (\n        <Picture\n          viewSrc={src}\n          fullSrc={fullSrc}\n          onLoad={onLoad}\n          index={index}\n          width={width}\n          height={height}\n          isFullscreen={isFullscreen}\n          onFinished={onFinished}\n          isActive={isActive}\n        />\n      )\n    case 'gif':\n      return (\n        <Gif\n          detailsVisible={detailsVisible}\n          viewSrc={src}\n          thumbnailSrc={preview}\n          fullSrc={fullSrc}\n          onLoad={onLoad}\n          index={index}\n          width={width}\n          height={height}\n          isFullscreen={isFullscreen}\n          onFinished={onFinished}\n          isActive={isActive}\n        />\n      )\n    case 'video':\n      return (\n        <Video\n          detailsVisible={detailsVisible}\n          viewSrc={src}\n          thumbnailSrc={preview}\n          fullSrc={fullSrc}\n          onLoad={onLoad}\n          index={index}\n          width={width}\n          height={height}\n          isFullscreen={isFullscreen}\n          onFinished={onFinished}\n          isActive={isActive}\n        />\n      )\n  }\n}\n","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { selectOriginals } from '../redux/selectors'\nimport * as r34 from 'r34-types'\n\nexport function useSources(type: r34.PostType, thumbnailSrc: string, sampleSrc: string, fullSrc: string) {\n  const loadOriginals = useSelector(selectOriginals)\n\n  return React.useMemo(() => {\n    switch (type) {\n      case 'image':\n        return loadOriginals ? ['', fullSrc] : ['', sampleSrc]\n      case 'gif':\n        return sampleSrc.includes('.gif') ? [thumbnailSrc, sampleSrc] : [sampleSrc, fullSrc]\n      case 'video':\n        return loadOriginals ? [thumbnailSrc, fullSrc] : [thumbnailSrc, sampleSrc]\n    }\n  }, [fullSrc, loadOriginals, sampleSrc, thumbnailSrc, type])\n}\n"],"sourceRoot":""}