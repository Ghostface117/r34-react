{"version":3,"sources":["hooks/useIsOnScreen.tsx","styled/animations.tsx","components/designsystem/Slider.tsx","icons/PlayPauseIcon.tsx","components/player/ToggleFullscreenButton.tsx","components/player/LinkList.tsx","components/player/Overlay.tsx","components/player/ProgressBar.tsx","components/player/FullscreenProgressBar.tsx","components/designsystem/FlexVideo.tsx","components/player/media/StyledMedia.ts","components/player/media/Picture.tsx","hooks/useIsScrolling.tsx","hooks/useAutoplay.tsx","components/player/media/Gif.tsx","components/player/media/Video.tsx","components/player/Media.tsx","hooks/useSources.tsx"],"names":["useIsOnScreen","target","options","useState","isOnScreen","setOnScreen","handleOnScreenChange","useCallback","entries","entry","isIntersecting","useEffect","observer","IntersectionObserver","threshold","root","observe","unobserve","fadeOut","keyframes","Slider","styled","input","$controls","$accent","theme","css","props","colors","layerBg","accentColor","backgroundColor2","trackStyle","commonStyle","thumbStyle","MorphSvg","svg","ToggleButton","InvisButton","dropShadow","dimensions","gutter","ToggleFullscreenButton","index","dispatch","useDispatch","history","useHistory","onFullscreenExit","React","event","stopPropagation","goBack","onFullscreenEnter","setFullscreenPost","push","RouteName","STORIES","location","pathname","onClick","title","color","Wrapper","div","flexRowWithGap","LinkButton","a","timings","transitionTime","DownloadButton","LinkList","fullSrc","handleDownload","download","href","rel","isVisible","VideoProgressBar","isPaused","videoRef","className","onChange","onEnded","sliderRef","useRef","useTheme","handleChange","newValue","Number","value","handleClick","addEventListener","removeEventListener","handle","requestAnimationFrame","step","current","currentTime","toString","chromePercentage","Math","round","duration","style","backgroundImage","cancelAnimationFrame","ref","type","min","max","AutoProgressBar","onFinished","NO_OP","isActive","mouseState","setMouseState","setPost","newIndex","useSelector","selectAutoscrollDelay","listener","document","then","Date","getTime","renderFrame","now","PlayButton","viewBox","xmlns","x","y","width","height","LengthDisplay","span","spacing","ForwardArea","BackwardArea","ImageOverlay","isFullscreen","GifOverlay","onTogglePaused","VideoOverlay","onSeek","handleSkipForward","e","preventDefault","handleSkipBackward","onDoubleClick","tabIndex","formatDuration","getOverlayContent","Overlay","setVisible","toggleVisible","FlexVideo","video","flexMedia","preserveAspectRatio","PostVideo","mediaStyle","PostImage","FlexImage","Picture","viewSrc","onLoad","src","alt","loading","timeoutId","isScrollingGlobal","observers","useAutoplay","playing","setPlaying","autoPlay","selectAutoPlay","isScrolling","setIsScrolling","undefined","forEach","update","clearTimeout","setTimeout","passive","filter","length","useIsScrolling","Gif","thumbnailSrc","detailsVisible","overlayVisible","setOverlayVisible","playState","setPlayState","gifRef","setGifRef","prefAutoplay","preload","selectPreloadGifs","usedSource","play","pause","togglePlay","Image","Video","setVideoRef","selectPreloadVideos","paused","message","includes","console","warn","error","err","handleSeek","controls","loop","onLoadedMetadata","Media","sampleSrc","loadOriginals","selectOriginals","useMemo","useSources","preview"],"mappings":"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","file":"static/js/0.04360531.chunk.js","sourcesContent":["import { useCallback, useEffect, useState } from 'react'\r\n\r\nexport default function useIsOnScreen(target: Element | null, options?: IntersectionObserverInit) {\r\n  const [isOnScreen, setOnScreen] = useState(false)\r\n\r\n  const handleOnScreenChange = useCallback((entries: IntersectionObserverEntry[]) => {\r\n    const [entry] = entries\r\n    setOnScreen(entry.isIntersecting)\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    const observer = new IntersectionObserver(handleOnScreenChange, options || { threshold: 1, root: null })\r\n\r\n    if (target) {\r\n      observer.observe(target)\r\n    }\r\n\r\n    return () => {\r\n      if (target) {\r\n        observer.unobserve(target)\r\n      }\r\n    }\r\n  }, [handleOnScreenChange, options, target])\r\n\r\n  return [isOnScreen]\r\n}\r\n","import { keyframes } from 'styled-components'\n\nexport const fadeOut = keyframes`\n  from {\n    opacity: 1;\n  }\n\n  to {\n    opacity: 0;\n  }\n`\n\nexport const kofiWiggle = keyframes`\n  0% {\n    transform: rotate(0) scale(1);\n  }\n  60% {\n    transform: rotate(0) scale(1);\n  }\n  75% {\n    transform: rotate(0) scale(1.12);\n  }\n  80% {\n    transform: rotate(0) scale(1.1);\n  }\n  84% {\n    transform: rotate(-10deg) scale(1.1);\n  }\n  88% {\n    transform: rotate(10deg) scale(1.1);\n  }\n  92% {\n    transform: rotate(-10deg) scale(1.1);\n  }\n  96% {\n    transform: rotate(10deg) scale(1.1);\n  }\n  100% {\n    transform: rotate(0) scale(1);\n  }\n`\n","import styled, { DefaultTheme, css } from 'styled-components'\r\n\r\nfunction thumbStyle({ $controls, theme }: { $controls: boolean; theme: DefaultTheme }) {\r\n  const commonStyle = css`\r\n    height: 16px;\r\n    width: 16px;\r\n    border-radius: 100px;\r\n    background: ${$controls ? theme.colors.backgroundColor2 : 'transparent'};\r\n    cursor: pointer;\r\n  `\r\n\r\n  return css`\r\n    &::-webkit-slider-thumb {\r\n      -webkit-appearance: none;\r\n      ${commonStyle}\r\n    }\r\n\r\n    &::-moz-range-thumb {\r\n      ${commonStyle}\r\n    }\r\n\r\n    &::-ms-thumb {\r\n      ${commonStyle}\r\n    }\r\n  `\r\n}\r\n\r\nfunction trackStyle({ $accent, theme }: { $accent: boolean; theme: DefaultTheme }) {\r\n  return css`\r\n    -webkit-appearance: none;\r\n    flex-grow: 1;\r\n    background: ${(props) => props.theme.colors.layerBg};\r\n    border-radius: 100px;\r\n    height: 6px;\r\n\r\n    &::-moz-range-progress {\r\n      background-color: ${$accent ? theme.colors.accentColor : theme.colors.backgroundColor2};\r\n    }\r\n\r\n    &::-ms-fill-lower {\r\n      background-color: ${$accent ? theme.colors.accentColor : theme.colors.backgroundColor2};\r\n    }\r\n  `\r\n}\r\n\r\nexport const Slider = styled.input(\r\n  ({ $controls, $accent, theme }: { $controls: boolean; $accent: boolean; theme: DefaultTheme }) => css`\r\n    ${trackStyle({ $accent, theme })}\r\n    ${thumbStyle({ $controls, theme })}\r\n  `\r\n)\r\n","import React, { MouseEventHandler } from 'react'\r\nimport styled from 'styled-components'\r\n\r\ninterface PlayPauseIconProps {\r\n  className?: string\r\n  isPaused: boolean\r\n  onClick: MouseEventHandler<SVGElement>\r\n}\r\n\r\nconst MorphSvg = styled.svg`\r\n  > rect {\r\n    transition: all 0.2s ease-in;\r\n  }\r\n\r\n  &.play {\r\n    .left {\r\n      clip-path: path('M1.61 0 L10.1 4.9 L10.1 19.1 L1.61 24');\r\n    }\r\n\r\n    .right {\r\n      clip-path: path('M22.39 12 L9.9 4.79 L9.9 19.21 L22.39 12');\r\n    }\r\n  }\r\n\r\n  &.pause {\r\n    .left {\r\n      clip-path: path('M4.8 0 L10 0 L10 24 L4.8 24');\r\n    }\r\n\r\n    .right {\r\n      clip-path: path('M19.2 0 L14 0 L14 24 L19.2 24');\r\n    }\r\n  }\r\n`\r\n\r\n/**\r\n * A button that fluidly transforms between a Play and a Pause icon based on isPaused.\r\n * Use onClick to update isPaused.\r\n * Additionally, this component takes a classname\r\n */\r\nexport function PlayPauseIcon(props: PlayPauseIconProps) {\r\n  const { onClick, className = '', isPaused } = props\r\n\r\n  return (\r\n    <MorphSvg\r\n      viewBox='0 0 24 24'\r\n      xmlns='http://www.w3.org/2000/svg'\r\n      onClick={onClick}\r\n      className={`${className} ${isPaused ? 'play' : 'pause'}`}\r\n    >\r\n      <rect className='left' color='currentColor' x='0' y='0' width='24' height=' 24' />\r\n      <rect className='right' color='currentColor' x='0' y='0' width='24' height=' 24' />\r\n    </MorphSvg>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { useDispatch } from 'react-redux'\r\nimport { useHistory } from 'react-router-dom'\r\nimport styled, { css } from 'styled-components'\r\nimport { RouteName } from '../../data/types'\r\nimport { ExpandIcon, CloseIcon } from '../../icons/FontAwesomeIcons'\r\nimport { setFullscreenPost } from '../../redux/actions'\r\nimport { dropShadow } from '../../styled/mixins'\r\nimport { InvisButton } from '../designsystem/Buttons'\r\n\r\nconst ToggleButton = styled(InvisButton)(\r\n  ({ theme }) => css`\r\n    grid-area: 1/1/2/2;\r\n    place-self: start start;\r\n    ${dropShadow}\r\n    padding: ${theme.dimensions.gutter};\r\n    cursor: pointer;\r\n  `\r\n)\r\n\r\ninterface ToggleFullscreenButtonProps {\r\n  index: number\r\n}\r\n\r\nexport default function ToggleFullscreenButton(props: ToggleFullscreenButtonProps) {\r\n  const { index } = props\r\n\r\n  const dispatch = useDispatch()\r\n  const history = useHistory()\r\n\r\n  const onFullscreenExit = React.useCallback<React.MouseEventHandler>(\r\n    (event) => {\r\n      event.stopPropagation()\r\n      history.goBack()\r\n    },\r\n    [history]\r\n  )\r\n\r\n  const onFullscreenEnter = React.useCallback<React.MouseEventHandler>(\r\n    (event) => {\r\n      event.stopPropagation()\r\n      dispatch(setFullscreenPost(index))\r\n      history.push(RouteName.STORIES)\r\n    },\r\n    [dispatch, history, index]\r\n  )\r\n\r\n  return history.location.pathname === RouteName.STORIES ? (\r\n    <ToggleButton onClick={onFullscreenExit} aria-label='Exit fullscreen' title='Exit fullscreen'>\r\n      <CloseIcon color='white' />\r\n    </ToggleButton>\r\n  ) : (\r\n    <ToggleButton onClick={onFullscreenEnter} aria-label='Enter fullscreen' title='Enter fullscreen'>\r\n      <ExpandIcon color='white' />\r\n    </ToggleButton>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport styled, { css } from 'styled-components'\r\nimport { download } from '../../data/utils'\r\nimport { DownloadIcon, ExternalLinkIcon } from '../../icons/FontAwesomeIcons'\r\nimport { dropShadow, flexRowWithGap } from '../../styled/mixins'\r\nimport { InvisButton } from '../designsystem/Buttons'\r\n\r\nconst Wrapper = styled.div(\r\n  ({ theme }) => css`\r\n    grid-area: 3/1/4/2;\r\n    ${flexRowWithGap}\r\n    place-self: end start;\r\n    place-items: start center;\r\n  `\r\n)\r\n\r\nconst LinkButton = styled.a(\r\n  ({ theme }) => css`\r\n    padding: ${theme.dimensions.gutter};\r\n    cursor: pointer;\r\n    ${dropShadow({ theme })}\r\n\r\n    svg {\r\n      transition: all ${theme.timings.transitionTime} ease-out;\r\n    }\r\n\r\n    :active {\r\n      svg {\r\n        transform: scale(1.1);\r\n      }\r\n    }\r\n  `\r\n)\r\n\r\nconst DownloadButton = styled(InvisButton)`\r\n  cursor: pointer;\r\n`\r\n\r\ninterface LinkListProps {\r\n  fullSrc: string\r\n}\r\n\r\nexport default function LinkList(props: LinkListProps) {\r\n  const { fullSrc } = props\r\n\r\n  const handleDownload = React.useCallback<React.MouseEventHandler>(\r\n    (event) => {\r\n      event.stopPropagation()\r\n      download(fullSrc)\r\n    },\r\n    [fullSrc]\r\n  )\r\n\r\n  return (\r\n    <Wrapper>\r\n      <LinkButton href={fullSrc} target='_blank' rel='noopener noreferrer' aria-label='Open In New Tab' title={fullSrc}>\r\n        <ExternalLinkIcon color='white' title='Open image in new tab' />\r\n      </LinkButton>\r\n\r\n      <DownloadButton aria-label='Download Image' onClick={handleDownload} title={fullSrc}>\r\n        <DownloadIcon color='white' />\r\n      </DownloadButton>\r\n    </Wrapper>\r\n  )\r\n}\r\n","import styled, { css } from 'styled-components'\nimport { fadeOut } from '../../styled/animations'\nimport { formatDuration } from '../../misc/formatting'\nimport { ProgressBar } from './ProgressBar'\nimport { dropShadow } from '../../styled/mixins'\nimport { PlayPauseIcon } from '../../icons/PlayPauseIcon'\nimport ToggleFullscreenButton from './ToggleFullscreenButton'\nimport LinkList from './LinkList'\nimport React, { useCallback } from 'react'\nimport FullscreenProgressBar from './FullscreenProgressBar'\nimport { BackwardIcon, ForwardIcon } from '../../icons/FontAwesomeIcons'\n\nfunction overlayVisibility({ isVisible }: { isVisible: boolean }) {\n  return isVisible\n    ? css``\n    : css`\n        opacity: 0;\n        animation: ${fadeOut} 0.4s ease-in;\n      `\n}\n\nconst Wrapper = styled.div`\n  grid-area: 1/1/2/2;\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  grid-template-rows: auto 1fr auto auto;\n  z-index: 1;\n\n  ${overlayVisibility};\n`\n\nconst VideoProgressBar = styled(ProgressBar)(\n  ({ theme }) => css`\n    grid-area: 4/1/4/4;\n    margin: ${theme.dimensions.gutter};\n  `\n)\n\nconst AutoProgressBar = styled(FullscreenProgressBar)(\n  ({ theme }) => css`\n    grid-area: 4/1/4/4;\n    margin: ${theme.dimensions.gutter};\n  `\n)\n\nconst PlayButton = styled(PlayPauseIcon)`\n  height: 50px;\n  width: 50px;\n  grid-area: 2/2/3/3;\n  place-self: center center;\n  cursor: pointer;\n  fill: white;\n  ${dropShadow}\n`\n\nconst LengthDisplay = styled.span(\n  (props) => css`\n    grid-area: 3/3/4/4;\n    place-self: end end;\n    background: #00000080;\n    color: white;\n    border-radius: 4px;\n    padding: ${props.theme.dimensions.spacing};\n    margin: ${props.theme.dimensions.gutter};\n  `\n)\n\nconst ForwardArea = styled.div`\n  display: grid;\n  grid-area: 2/3/3/4;\n  place-items: center;\n  opacity: 0;\n`\n\nconst BackwardArea = styled.div`\n  display: grid;\n  grid-area: 2/1/3/2;\n  place-items: center;\n  opacity: 0;\n`\n\ntype ImageOverlayProps = {\n  type: 'image'\n  index: number\n  fullSrc: string\n  isFullscreen: boolean\n  onFinished?: () => void\n  isActive: boolean\n}\n\ntype GifOverlayProps = {\n  type: 'gif'\n  index: number\n  fullSrc: string\n  isPaused: boolean\n  onTogglePaused: React.MouseEventHandler\n  isFullscreen: boolean\n  onFinished?: () => void\n  isActive: boolean\n}\n\ntype VideoOverlayProps = {\n  type: 'video'\n  index: number\n  fullSrc: string\n  isPaused: boolean\n  duration: number\n  onTogglePaused: React.MouseEventHandler\n  onSeek: (value: number) => void\n  videoRef: HTMLVideoElement | null\n  isFullscreen: boolean\n  onFinished?: () => void\n  isActive: boolean\n}\n\ntype OverlayProps = (ImageOverlayProps | VideoOverlayProps | GifOverlayProps) & {\n  isVisible: boolean\n  setVisible: (value: boolean) => void\n}\n\nexport function ImageOverlay(props: Omit<ImageOverlayProps, 'type'>) {\n  const { index, fullSrc, isFullscreen, isActive, onFinished } = props\n\n  return (\n    <>\n      <ToggleFullscreenButton index={index} />\n      <LinkList fullSrc={fullSrc} />\n      {isFullscreen && <AutoProgressBar index={index} onFinished={onFinished} isActive={isActive} />}\n    </>\n  )\n}\n\nfunction GifOverlay(props: Omit<GifOverlayProps, 'type'>) {\n  const { fullSrc, isPaused, index, onTogglePaused, isFullscreen, isActive, onFinished } = props\n\n  return (\n    <>\n      <ToggleFullscreenButton index={index} />\n      <LinkList fullSrc={fullSrc} />\n      <PlayButton isPaused={isPaused} onClick={onTogglePaused} aria-label='Play/Pause' />\n      {isFullscreen && (\n        <AutoProgressBar index={index} isPaused={isPaused} onFinished={onFinished} isActive={isActive} />\n      )}\n      <LengthDisplay>GIF</LengthDisplay>\n    </>\n  )\n}\n\nfunction VideoOverlay(props: Omit<VideoOverlayProps, 'type'>) {\n  const { fullSrc, isPaused, index, onTogglePaused, onSeek, duration, videoRef, isActive, onFinished } = props\n\n  const handleSkipForward = useCallback(\n    (e) => {\n      e.preventDefault()\n      if (videoRef) {\n        onSeek(videoRef.currentTime + 10)\n      }\n    },\n    [onSeek, videoRef]\n  )\n\n  const handleSkipBackward = useCallback(\n    (e) => {\n      e.preventDefault()\n      if (videoRef) {\n        onSeek(videoRef.currentTime - 10)\n      }\n    },\n    [onSeek, videoRef]\n  )\n\n  return (\n    <>\n      <ToggleFullscreenButton index={index} />\n      <LinkList fullSrc={fullSrc} />\n      <BackwardArea onDoubleClick={handleSkipBackward}>\n        <BackwardIcon tabIndex={0} />\n      </BackwardArea>\n      <PlayButton isPaused={isPaused || !isActive} onClick={onTogglePaused} aria-label='Play/Pause' />\n      <ForwardArea onDoubleClick={handleSkipForward}>\n        <ForwardIcon tabIndex={0} />\n      </ForwardArea>\n      <LengthDisplay>{formatDuration(duration)}</LengthDisplay>\n      <VideoProgressBar isPaused={isPaused || !isActive} videoRef={videoRef} onChange={onSeek} onEnded={onFinished} />\n    </>\n  )\n}\n\nfunction getOverlayContent(props: OverlayProps) {\n  switch (props.type) {\n    case 'image':\n      return <ImageOverlay {...props} />\n    case 'gif':\n      return <GifOverlay {...props} />\n    case 'video':\n      return <VideoOverlay {...props} />\n  }\n}\n\nexport function Overlay(props: OverlayProps) {\n  const { isVisible, setVisible } = props\n\n  const toggleVisible = React.useCallback(() => setVisible(!isVisible), [isVisible, setVisible])\n\n  return (\n    <Wrapper isVisible={isVisible} onClick={toggleVisible} data-testid='overlay-wrapper'>\n      {getOverlayContent(props)}\n    </Wrapper>\n  )\n}\n","import React, { ChangeEventHandler, MouseEventHandler, useCallback } from 'react'\r\nimport { useTheme } from 'styled-components'\r\nimport { Slider } from '../designsystem/Slider'\r\n\r\ninterface ProgressBarProps {\r\n  isPaused: boolean\r\n  videoRef: HTMLVideoElement | null\r\n  onChange: (newValue: number) => void\r\n  className?: string\r\n  onEnded?: () => void\r\n}\r\n\r\nexport const ProgressBar = (props: ProgressBarProps) => {\r\n  const { isPaused, videoRef, className, onChange, onEnded } = props\r\n\r\n  const sliderRef = React.useRef<HTMLInputElement>(null)\r\n\r\n  const theme = useTheme()\r\n\r\n  const handleChange: ChangeEventHandler<HTMLInputElement> = useCallback(\r\n    (event) => {\r\n      const newValue = Number(event.target.value)\r\n      onChange(newValue)\r\n    },\r\n    [onChange]\r\n  )\r\n\r\n  const handleClick: MouseEventHandler = useCallback((event) => {\r\n    event.stopPropagation()\r\n  }, [])\r\n\r\n  React.useEffect(() => {\r\n    if (onEnded && videoRef) {\r\n      videoRef.addEventListener('ended', onEnded)\r\n\r\n      return () => videoRef.removeEventListener('ended', onEnded)\r\n    }\r\n  })\r\n\r\n  React.useEffect(() => {\r\n    if (!isPaused) {\r\n      let handle: number\r\n\r\n      const step = () => {\r\n        if (sliderRef?.current && videoRef) {\r\n          sliderRef.current.value = videoRef.currentTime.toString()\r\n          const chromePercentage = Math.round((videoRef.currentTime / videoRef.duration) * 100)\r\n          sliderRef.current.style.backgroundImage = `linear-gradient(90deg, ${theme.colors.accentColor} ${chromePercentage}%, transparent ${chromePercentage}%)`\r\n        }\r\n\r\n        handle = requestAnimationFrame(step)\r\n      }\r\n\r\n      handle = requestAnimationFrame(step)\r\n\r\n      return () => {\r\n        cancelAnimationFrame(handle)\r\n      }\r\n    }\r\n  }, [isPaused, theme.colors.accentColor, theme.colors.backgroundColor2, videoRef])\r\n\r\n  return (\r\n    <Slider\r\n      ref={sliderRef}\r\n      type='range'\r\n      step={0.034}\r\n      min={0}\r\n      max={videoRef?.duration || 0}\r\n      onChange={handleChange}\r\n      className={className}\r\n      onClick={handleClick}\r\n      $controls\r\n      $accent\r\n    />\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { NO_OP } from '../../data/types'\r\nimport { setFullscreenPost } from '../../redux/actions'\r\nimport { selectAutoscrollDelay } from '../../redux/selectors'\r\nimport { Slider } from '../designsystem/Slider'\r\n\r\ninterface FullscreenProgressBarProps {\r\n  className?: string\r\n  index: number\r\n  isPaused?: boolean\r\n  onFinished?: () => void\r\n  isActive: boolean\r\n}\r\n\r\nexport default function FullscreenProgressBar(props: FullscreenProgressBarProps) {\r\n  const { onFinished = NO_OP, isActive } = props\r\n\r\n  const dispatch = useDispatch()\r\n  const [mouseState, setMouseState] = React.useState(false)\r\n  const setPost = React.useCallback((newIndex) => dispatch(setFullscreenPost(newIndex)), [dispatch])\r\n  const duration = 1000 * useSelector(selectAutoscrollDelay)\r\n  const ref = React.useRef<HTMLInputElement>(null)\r\n\r\n  React.useEffect(() => {\r\n    const listener = () => setMouseState(true)\r\n    document.addEventListener('mousedown', listener)\r\n    document.addEventListener('touchstart', listener)\r\n\r\n    return () => {\r\n      document.removeEventListener('mousedown', listener)\r\n      document.removeEventListener('touchstart', listener)\r\n    }\r\n  })\r\n\r\n  React.useEffect(() => {\r\n    const listener = () => setMouseState(false)\r\n    document.addEventListener('mouseup', listener)\r\n    document.addEventListener('touchend', listener)\r\n\r\n    return () => {\r\n      document.removeEventListener('mouseup', listener)\r\n      document.removeEventListener('touchend', listener)\r\n    }\r\n  })\r\n\r\n  React.useEffect(() => {\r\n    if (!mouseState && isActive) {\r\n      let handle: number\r\n      let then = new Date().getTime()\r\n\r\n      const renderFrame = () => {\r\n        if (ref.current) {\r\n          const now = new Date().getTime()\r\n          const newValue = Number(ref.current.value) + (now - then)\r\n          then = now\r\n\r\n          ref.current.value = newValue.toString()\r\n          const chromePercentage = Math.round((newValue / duration) * 100)\r\n          ref.current.style.backgroundImage = `linear-gradient(90deg, #ffffff80 ${chromePercentage}%, transparent ${chromePercentage}%)`\r\n\r\n          if (newValue >= Number(ref.current.max)) {\r\n            onFinished()\r\n            if (ref.current) {\r\n              ref.current.value = '0'\r\n            }\r\n          } else {\r\n            handle = requestAnimationFrame(renderFrame)\r\n          }\r\n        }\r\n      }\r\n\r\n      handle = requestAnimationFrame(renderFrame)\r\n\r\n      return () => {\r\n        cancelAnimationFrame(handle)\r\n      }\r\n    }\r\n  }, [duration, isActive, mouseState, onFinished, props.index, setPost])\r\n\r\n  return (\r\n    <Slider\r\n      ref={ref}\r\n      type='range'\r\n      step={0.034}\r\n      min={0}\r\n      max={duration}\r\n      onChange={NO_OP}\r\n      onClick={NO_OP}\r\n      $controls={false}\r\n      $accent={false}\r\n      className={props.className}\r\n    />\r\n  )\r\n}\r\n","import styled from 'styled-components'\nimport { flexMedia, preserveAspectRatio } from '../../styled/mixins'\n\nconst FlexVideo = styled.video`\n  ${flexMedia}\n  ${preserveAspectRatio}\n  grid-area: 1/1/2/2;\n`\n\nexport default FlexVideo\n","import styled from 'styled-components'\r\nimport { mediaStyle } from '../../../styled/mixins'\r\nimport FlexImage from '../../designsystem/FlexImage'\r\nimport FlexVideo from '../../designsystem/FlexVideo'\r\n\r\nexport const PostVideo = styled(FlexVideo)`\r\n  ${mediaStyle}\r\n`\r\n\r\nexport const PostImage = styled(FlexImage)`\r\n  ${mediaStyle}\r\n`\r\n","import React from 'react'\r\nimport { NO_OP } from '../../../data/types'\r\nimport { Overlay } from '../Overlay'\r\nimport { PostImage } from './StyledMedia'\r\n\r\ninterface PictureProps {\r\n  viewSrc: string\r\n  fullSrc: string\r\n  onLoad?: () => void\r\n  width: number\r\n  height: number\r\n  index: number\r\n  isFullscreen: boolean\r\n  onFinished?: () => void\r\n  isActive: boolean\r\n}\r\n\r\nexport default function Picture(props: PictureProps) {\r\n  const { viewSrc, fullSrc, index, onLoad = NO_OP, width, height, isFullscreen, isActive, onFinished } = props\r\n\r\n  return (\r\n    <>\r\n      <PostImage\r\n        data-testid='image'\r\n        src={viewSrc}\r\n        alt={viewSrc}\r\n        onLoad={onLoad}\r\n        loading='lazy'\r\n        width={width}\r\n        height={height}\r\n      />\r\n      <Overlay\r\n        type='image'\r\n        fullSrc={fullSrc}\r\n        index={index}\r\n        isVisible={true}\r\n        setVisible={NO_OP}\r\n        isFullscreen={isFullscreen}\r\n        onFinished={onFinished}\r\n        isActive={isActive}\r\n      />\r\n    </>\r\n  )\r\n}\r\n","import React from 'react'\r\n\r\nlet isScrollingGlobal = false\r\nlet observers: React.Dispatch<React.SetStateAction<boolean>>[] = []\r\nlet listener: ((e: any) => void) | undefined\r\nlet timeoutId: NodeJS.Timeout | undefined\r\n\r\nexport const useIsScrolling = () => {\r\n  const [isScrolling, setIsScrolling] = React.useState(isScrollingGlobal)\r\n\r\n  if (listener === undefined) {\r\n    listener = (e) => {\r\n      isScrollingGlobal = true\r\n      observers.forEach((update) => update(isScrollingGlobal))\r\n\r\n      if (timeoutId) clearTimeout(timeoutId)\r\n\r\n      timeoutId = setTimeout(() => {\r\n        isScrollingGlobal = false\r\n        observers.forEach((update) => update(isScrollingGlobal))\r\n      }, 500)\r\n    }\r\n    document.addEventListener('scroll', listener, { passive: true })\r\n  }\r\n\r\n  React.useEffect(() => {\r\n    observers.push(setIsScrolling)\r\n    setIsScrolling(isScrollingGlobal)\r\n    return () => {\r\n      observers = observers.filter((update) => update !== setIsScrolling)\r\n\r\n      if (observers.length === 0 && listener) {\r\n        document.removeEventListener('scroll', listener)\r\n        listener = undefined\r\n      }\r\n    }\r\n  }, [])\r\n\r\n  // return global isOnline state and setter function\r\n  return isScrolling\r\n}\r\n","import React from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport { selectAutoPlay } from '../redux/selectors'\r\nimport useIsOnScreen from './useIsOnScreen'\r\nimport { useIsScrolling } from './useIsScrolling'\r\n\r\nexport function useAutoplay(ref: Element | null) {\r\n  const [playing, setPlaying] = React.useState(false)\r\n\r\n  const autoPlay = useSelector(selectAutoPlay)\r\n  const [isOnScreen] = useIsOnScreen(ref)\r\n  const isScrolling = useIsScrolling()\r\n\r\n  React.useEffect(() => {\r\n    if (autoPlay && isOnScreen && !isScrolling) {\r\n      setPlaying(true)\r\n    }\r\n  }, [autoPlay, isOnScreen, isScrolling])\r\n\r\n  React.useEffect(() => {\r\n    if (!isOnScreen) {\r\n      setPlaying(false)\r\n    }\r\n  }, [isOnScreen])\r\n\r\n  return playing\r\n}\r\n","import React, { useEffect, useState } from 'react'\nimport { NO_OP } from '../../../data/types'\nimport MediaProps from './MediaProps'\nimport { Overlay } from '../Overlay'\nimport { PostImage } from './StyledMedia'\nimport { useSelector } from 'react-redux'\nimport { selectAutoPlay, selectPreloadGifs } from '../../../redux/selectors'\nimport { useAutoplay } from '../../../hooks/useAutoplay'\n\nexport default function Gif(props: MediaProps) {\n  const {\n    viewSrc,\n    thumbnailSrc,\n    fullSrc,\n    onLoad = NO_OP,\n    index,\n    width,\n    height,\n    detailsVisible,\n    isFullscreen,\n    onFinished,\n    isActive,\n  } = props\n\n  const [overlayVisible, setOverlayVisible] = React.useState(true)\n\n  // user play\n  const [playState, setPlayState] = useState(false)\n\n  // auto play\n  const [gifRef, setGifRef] = useState<HTMLImageElement | null>(null)\n  const prefAutoplay = useSelector(selectAutoPlay)\n  const autoPlay = useAutoplay(gifRef)\n  // Preloading\n  const preload = useSelector(selectPreloadGifs)\n\n  const usedSource = playState ? viewSrc : thumbnailSrc\n\n  const play = React.useCallback(async () => {\n    setPlayState(true)\n  }, [])\n\n  const pause = React.useCallback(() => {\n    setPlayState(false)\n  }, [])\n\n  const togglePlay: React.MouseEventHandler = React.useCallback(\n    (e) => {\n      e.stopPropagation()\n      if (playState) {\n        setPlayState(false)\n      } else {\n        setPlayState(true)\n        setOverlayVisible(false)\n      }\n    },\n    [playState]\n  )\n\n  React.useEffect(() => {\n    if (prefAutoplay) {\n      if (autoPlay) {\n        setPlayState(true)\n      }\n    }\n\n    if (!autoPlay) {\n      setPlayState(false)\n    }\n  }, [autoPlay, pause, play, prefAutoplay])\n\n  useEffect(() => {\n    if (preload) {\n      const loader = new Image()\n      loader.src = viewSrc\n    }\n  })\n\n  return (\n    <>\n      <PostImage\n        data-testid='gif'\n        ref={setGifRef}\n        src={usedSource}\n        alt={usedSource}\n        loading='lazy'\n        onLoad={onLoad}\n        width={width}\n        height={height}\n      />\n\n      <Overlay\n        isVisible={!playState || overlayVisible || detailsVisible}\n        setVisible={setOverlayVisible}\n        type='gif'\n        fullSrc={fullSrc}\n        index={index}\n        isPaused={!playState}\n        onTogglePaused={togglePlay}\n        isFullscreen={isFullscreen}\n        onFinished={onFinished}\n        isActive={isActive}\n      />\n    </>\n  )\n}\n","import React, { useState } from 'react'\nimport { useSelector } from 'react-redux'\nimport { NO_OP } from '../../../data/types'\nimport { selectAutoPlay, selectPreloadVideos } from '../../../redux/selectors'\nimport MediaProps from './MediaProps'\nimport { Overlay } from '../Overlay'\nimport { PostVideo } from './StyledMedia'\nimport { useAutoplay } from '../../../hooks/useAutoplay'\n\nexport default function Video(props: MediaProps) {\n  const {\n    viewSrc,\n    fullSrc,\n    onLoad = NO_OP,\n    index,\n    width,\n    height,\n    detailsVisible,\n    isFullscreen,\n    isActive,\n    onFinished,\n  } = props\n\n  const [playState, setPlayState] = useState(false)\n\n  const [overlayVisible, setOverlayVisible] = React.useState(true)\n  const [videoRef, setVideoRef] = useState<HTMLVideoElement | null>(null)\n\n  const autoPlay = useAutoplay(videoRef)\n\n  const preload = useSelector(selectPreloadVideos) ? 'auto' : 'metadata'\n  const prefAutoplay = useSelector(selectAutoPlay)\n\n  const play = React.useCallback(async () => {\n    if (videoRef?.paused) {\n      try {\n        await videoRef.play()\n        setPlayState(true)\n      } catch (err) {\n        if ((err as DOMException).message.includes(\"user didn't interact with the document first\")) {\n          // Modern browsers prevent playing of videos before the use has interacted with the page in some form\n          console.warn('Autoplay failed because the user did not interact with the page first:', err)\n        } else if ((err as DOMException).message.includes('play() request was interrupted by a call to pause()')) {\n          // This happens when you scrollfast with autoplay enabled.\n          // The videos attempt to play but before they actually start you already scroll on\n          // and they get paused as they move offscreen.\n          console.warn('Play was interrupted by pause', err)\n        } else {\n          console.error('Failed to start video:', err)\n        }\n      }\n    }\n  }, [videoRef])\n\n  const pause = React.useCallback(() => {\n    if (!videoRef?.paused) {\n      try {\n        videoRef?.pause()\n        setPlayState(false)\n      } catch (err) {\n        console.error('Failed to start video:', err)\n      }\n    }\n  }, [videoRef])\n\n  const handleSeek = React.useCallback(\n    (value: number) => {\n      if (videoRef) {\n        videoRef.currentTime = value\n      }\n    },\n    [videoRef]\n  )\n\n  // user play\n  const togglePlay: React.MouseEventHandler = React.useCallback(\n    (e) => {\n      e.stopPropagation()\n      if (videoRef) {\n        if (videoRef.paused) {\n          play()\n          setOverlayVisible(false)\n        } else {\n          pause()\n        }\n      }\n    },\n    [pause, play, videoRef]\n  )\n\n  React.useEffect(() => {\n    if (prefAutoplay) {\n      if (autoPlay) {\n        play()\n      }\n    }\n\n    if (!autoPlay) {\n      pause()\n    }\n  }, [autoPlay, pause, play, prefAutoplay])\n\n  return (\n    <>\n      <PostVideo\n        data-testid='video'\n        controls={false}\n        loop={!isFullscreen}\n        preload={preload}\n        ref={setVideoRef}\n        onLoadedMetadata={onLoad}\n        width={width}\n        height={height}\n        src={viewSrc}\n      />\n      <Overlay\n        type='video'\n        index={index}\n        fullSrc={fullSrc}\n        isPaused={!playState}\n        duration={videoRef?.duration || 0}\n        onTogglePaused={togglePlay}\n        onSeek={handleSeek}\n        videoRef={videoRef}\n        isVisible={!playState || detailsVisible || overlayVisible}\n        setVisible={setOverlayVisible}\n        isFullscreen={isFullscreen}\n        onFinished={onFinished}\n        isActive={isActive}\n      />\n    </>\n  )\n}\n","import * as r34 from 'r34-types'\r\nimport React from 'react'\r\nimport Picture from './media/Picture'\r\nimport Gif from './media/Gif'\r\nimport Video from './media/Video'\r\nimport { useSources } from '../../hooks/useSources'\r\n\r\ntype MediaProps = {\r\n  type: r34.PostType\r\n  index: number\r\n  thumbnailSrc: string\r\n  sampleSrc: string\r\n  fullSrc: string\r\n  onLoad: () => void\r\n  width: number\r\n  height: number\r\n  detailsVisible: boolean\r\n  isFullscreen?: boolean\r\n  onFinished?: () => void\r\n  isActive?: boolean\r\n}\r\n\r\nexport function Media(props: MediaProps) {\r\n  const {\r\n    type,\r\n    thumbnailSrc,\r\n    sampleSrc,\r\n    fullSrc,\r\n    index,\r\n    onLoad,\r\n    width,\r\n    height,\r\n    detailsVisible,\r\n    isFullscreen = false,\r\n    onFinished,\r\n    isActive = false,\r\n  } = props\r\n  const [preview, src] = useSources(type, thumbnailSrc, sampleSrc, fullSrc)\r\n\r\n  switch (type) {\r\n    case 'image':\r\n      return (\r\n        <Picture\r\n          viewSrc={src}\r\n          fullSrc={fullSrc}\r\n          onLoad={onLoad}\r\n          index={index}\r\n          width={width}\r\n          height={height}\r\n          isFullscreen={isFullscreen}\r\n          onFinished={onFinished}\r\n          isActive={isActive}\r\n        />\r\n      )\r\n    case 'gif':\r\n      return (\r\n        <Gif\r\n          detailsVisible={detailsVisible}\r\n          viewSrc={src}\r\n          thumbnailSrc={preview}\r\n          fullSrc={fullSrc}\r\n          onLoad={onLoad}\r\n          index={index}\r\n          width={width}\r\n          height={height}\r\n          isFullscreen={isFullscreen}\r\n          onFinished={onFinished}\r\n          isActive={isActive}\r\n        />\r\n      )\r\n    case 'video':\r\n      return (\r\n        <Video\r\n          detailsVisible={detailsVisible}\r\n          viewSrc={src}\r\n          thumbnailSrc={preview}\r\n          fullSrc={fullSrc}\r\n          onLoad={onLoad}\r\n          index={index}\r\n          width={width}\r\n          height={height}\r\n          isFullscreen={isFullscreen}\r\n          onFinished={onFinished}\r\n          isActive={isActive}\r\n        />\r\n      )\r\n  }\r\n}\r\n","import React from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport { selectOriginals } from '../redux/selectors'\r\nimport * as r34 from 'r34-types'\r\n\r\nexport function useSources(type: r34.PostType, thumbnailSrc: string, sampleSrc: string, fullSrc: string) {\r\n  const loadOriginals = useSelector(selectOriginals)\r\n\r\n  return React.useMemo(() => {\r\n    switch (type) {\r\n      case 'image':\r\n        return loadOriginals ? ['', fullSrc] : ['', sampleSrc]\r\n      case 'gif':\r\n        return sampleSrc.includes('.gif') ? [thumbnailSrc, sampleSrc] : [sampleSrc, fullSrc]\r\n      case 'video':\r\n        return loadOriginals ? [thumbnailSrc, fullSrc] : [thumbnailSrc, sampleSrc]\r\n    }\r\n  }, [fullSrc, loadOriginals, sampleSrc, thumbnailSrc, type])\r\n}\r\n"],"sourceRoot":""}